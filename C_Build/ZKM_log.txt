[2014.12.14 12:17:30] Zelix KlassMaster 5.5.8 - License #14948
                      Single - Small Developer 
                      (company of less than 3 people)
                      Whitney Levens
                      6206 Broadwater Dr Kernersville, NC USA
                      Copyright 1997-2013 Zelix Pty Ltd (ABN 47 078 740 093)
                      All rights reserved
[2014.12.14 12:17:30] Preprocessing ZKM Script file "F:\DATA\Dev\bukkit_ws\C_Core\C_Build\src\main\resources\zkm.txt"
[2014.12.14 12:17:30] Parsing ZKM Script file "F:\DATA\Dev\bukkit_ws\C_Core\C_Build\src\main\resources\zkm.txt"
ERROR: Invalid classpath in "classpath" statement at line 5 : "C:\Program Files\Java\jdk1.7.0_55\jre\lib\accessibility.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\calendars.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\classlist", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\content-types.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\currency.data", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\flavormap.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\fontconfig.bfc", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\fontconfig.properties.src", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\javafx.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\jvm.hprof.txt", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\launcher.exe", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\logging.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\meta-index", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\net.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\psfont.properties.ja", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\psfontj2d.properties", "C:\Program Files\Java\jdk1.7.0_55\jre\lib\sound.properties" and "C:\Program Files\Java\jdk1.7.0_55\jre\lib\tzmappings" are not valid paths.
[2014.12.14 12:17:30] Setting classpath to "F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\ant-1.8.2.jar;F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\ant-jsch.jar;F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\HolographicDisplays_v1.8.12.jar;F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\javax.servlet-api.jar;F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\jsch-0.1.51.jar;F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\scala-library.jar;F:\DATA\Dev\bukkit_ws\C_Core\C_Build\libs\ZKM.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\alt-rt.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\amd64;C:\Program Files\Java\jdk1.7.0_55\jre\lib\applet;C:\Program Files\Java\jdk1.7.0_55\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\cmm;C:\Program Files\Java\jdk1.7.0_55\jre\lib\deploy;C:\Program Files\Java\jdk1.7.0_55\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\ext;C:\Program Files\Java\jdk1.7.0_55\jre\lib\fonts;C:\Program Files\Java\jdk1.7.0_55\jre\lib\images;C:\Program Files\Java\jdk1.7.0_55\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\jce.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\jfr;C:\Program Files\Java\jdk1.7.0_55\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\jfxrt.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\management;C:\Program Files\Java\jdk1.7.0_55\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\resources.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\rt.jar;C:\Program Files\Java\jdk1.7.0_55\jre\lib\security;C:\Program Files\Java\jdk1.7.0_55\jre\lib\zi;C:\Users\Martin\.m2\repository\org\spigotmc\spigot\1.8-R0.1-SNAPSHOT\spigot-1.8-R0.1-SNAPSHOT.jar;C:\Users\Martin\.m2\repository\de\slikey\EffectLib\2.4-SNAPSHOT\EffectLib-2.4-SNAPSHOT.jar;C:\Users\Martin\.m2\repository\org\java-websocket\Java-WebSocket\1.3.0\Java-WebSocket-1.3.0.jar;C:\Users\Martin\.m2\repository\com\comphenix\protocol\ProtocolLib\3.6.3-SNAPSHOT\ProtocolLib-3.6.3-SNAPSHOT.jar;C:\Users\Martin\.m2\repository\ru\tehkode\PermissionsEx\1.21.2-SNAPSHOT\PermissionsEx-1.21.2-SNAPSHOT.jar;C:\Users\Martin\.m2\repository\avalon-framework\avalon-framework\4.1.5\avalon-framework-4.1.5.jar;C:\Users\Martin\.m2\repository\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar"
[2014.12.14 12:17:30] Opening classes...
API calls detected that may not be handled automatically...
In class me.MiniDigger.CraftCore.AddOn.CoreAddOnClassLoader
    in method public CoreAddOnClassLoader(java.lang.ClassLoader, java.lang.String, java.net.URL) 
        java.lang.Class.newInstance()
        java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)
In class me.MiniDigger.CraftCore.Bar.CoreBarHandler
    in method private static void sendPacket(org.bukkit.entity.Player, java.lang.Object) 
        java.lang.Class.getField(java.lang.String)
In class me.MiniDigger.CraftCore.Bar.CoreFakeDragon
    in method public java.lang.Object getSpawnPacket() 
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
    in method public java.lang.Object getDestroyPacket() 
        java.lang.Class.getConstructor(java.lang.Class[])
    in method public java.lang.Object getMetaPacket(java.lang.Object) 
        java.lang.Class.getConstructor(java.lang.Class[])
    in method public java.lang.Object getTeleportPacket(org.bukkit.Location) 
        java.lang.Class.getConstructor(java.lang.Class[])
    in method public java.lang.Object getWatcher() 
        java.lang.Class.getConstructor(java.lang.Class[])
In class me.MiniDigger.CraftCore.Class.CoreClassLoader
    in method public java.lang.Class load(java.net.URL, java.lang.String) 
        java.lang.Package.getName()
In class me.MiniDigger.CraftCore.Command.Commands.ForceCredits
    in method static 
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getDeclaredField(java.lang.String)
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
    in method private static java.lang.Class getMCClass(java.lang.String) 
        java.lang.Class.forName(java.lang.String)
        java.lang.Package.getName()
    in method private static java.lang.Class getCraftClass(java.lang.String) 
        java.lang.Class.forName(java.lang.String)
        java.lang.Package.getName()
In class me.MiniDigger.CraftCore.Command.CoreCommandHandler
    in method public void unregisterCommands(java.lang.Object) 
        java.lang.reflect.Method.getName()
    in method public void registerCommands(java.lang.Object) 
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
    in method private void registerCompleter(java.lang.String, java.lang.reflect.Method, java.lang.Object) 
        java.lang.Class.getDeclaredField(java.lang.String)
        java.lang.reflect.Method.getName()
In class me.MiniDigger.CraftCore.Entity.CoreEntityType
    in method public void spawnEntity(org.bukkit.Location) 
        java.lang.Class.getConstructor(java.lang.Class[])
In class me.MiniDigger.CraftCore.Game.CoreGameHandler
    in method public void searchMainGame() 
        java.lang.Class.newInstance()
In class me.MiniDigger.CraftCore.Packet.CorePacketHandler
    in method public boolean handleIncome(java.lang.String, org.java_websocket.WebSocket) 
        java.lang.Class.getConstructor(java.lang.Class[])
    in method public void handleIncome(java.lang.String) 
        java.lang.Class.getConstructor(java.lang.Class[])
In class me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$7
    in method public void onPacketReceiving(com.comphenix.protocol.events.PacketEvent) 
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
In class me.MiniDigger.CraftCore.Socket.CoreSocketHandler
    in method public void registerPackets() 
        java.lang.Class.newInstance()
In class me.MiniDigger.CraftCore.Util.CoreEnumUtil
    in method public static me.MiniDigger.Core.Feature.FeatureType addFeatureType(java.lang.String, int) 
        java.lang.Class.getDeclaredField(java.lang.String)
In class me.MiniDigger.CraftCore.Util.CoreEnumUtil$DynamicEnumType
    in method private static void blankField(java.lang.Class, java.lang.String) 
        java.lang.reflect.Field.getName()
    in method public static java.lang.Enum addEnum(java.lang.Class, java.lang.String, java.lang.Class[], java.lang.Object[]) 
        java.lang.reflect.Field.getName()
In class me.MiniDigger.CraftCore.Util.CoreReflectionUtil
    in method public java.lang.Class getCraftClass(java.lang.String) 
        java.lang.Package.getName()
        java.lang.Class.forName(java.lang.String)
    in method public java.lang.reflect.Field getField(java.lang.Class, java.lang.String) 
        java.lang.Class.getDeclaredField(java.lang.String)
    in method public java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 
        java.lang.reflect.Method.getName()
    in method public java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String) 
        java.lang.reflect.Method.getName()
    in method public java.lang.Object getPrivateField(java.lang.String, java.lang.Class, java.lang.Object) 
        java.lang.Class.getDeclaredField(java.lang.String)
In class mkremins.fanciful.FancyMessage
    in method public mkremins.fanciful.FancyMessage itemTooltip(org.bukkit.inventory.ItemStack) 
        java.lang.Class.newInstance()
In class net.amoebaman.util.Reflection
    in method public static synchronized java.lang.String getVersion() 
        java.lang.Package.getName()
    in method public static synchronized java.lang.Class getNMSClass(java.lang.String) 
        java.lang.Class.forName(java.lang.String)
    in method public static synchronized java.lang.Class getOBCClass(java.lang.String) 
        java.lang.Class.forName(java.lang.String)
    in method public static synchronized java.lang.reflect.Field getField(java.lang.Class, java.lang.String) 
        java.lang.Class.getDeclaredField(java.lang.String)
    in method public static synchronized java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 
        java.lang.reflect.Method.getName()
In class org.apache.commons.codec.language.ColognePhonetic
    in method public java.lang.Object encode(java.lang.Object) 
        java.lang.Class.getName()
        java.lang.Class.getName()
In class org.apache.commons.codec.net.BCodec
    in method public java.lang.Object encode(java.lang.Object) 
        java.lang.Class.getName()
    in method public java.lang.Object decode(java.lang.Object) 
        java.lang.Class.getName()
In class org.apache.commons.codec.net.QCodec
    in method public java.lang.Object encode(java.lang.Object) 
        java.lang.Class.getName()
    in method public java.lang.Object decode(java.lang.Object) 
        java.lang.Class.getName()
In class org.apache.commons.codec.net.QuotedPrintableCodec
    in method public java.lang.Object encode(java.lang.Object) 
        java.lang.Class.getName()
    in method public java.lang.Object decode(java.lang.Object) 
        java.lang.Class.getName()
In class org.apache.commons.codec.net.URLCodec
    in method public java.lang.Object encode(java.lang.Object) 
        java.lang.Class.getName()
    in method public java.lang.Object decode(java.lang.Object) 
        java.lang.Class.getName()
In class org.apache.http.impl.auth.NTLMScheme
    in method public org.apache.http.Header authenticate(org.apache.http.auth.Credentials, org.apache.http.HttpRequest) 
        java.lang.Class.getName()
In class org.apache.http.impl.client.AbstractHttpClient
    in method protected org.apache.http.conn.ClientConnectionManager createClientConnectionManager() 
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.newInstance()
In class org.apache.http.impl.client.CloseableHttpResponseProxy
    in method public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) 
        java.lang.reflect.Method.getName()
    in method static 
        java.lang.Class.getConstructor(java.lang.Class[])
In class org.apache.http.impl.client.DefaultRequestDirector
    in method private void tryConnect(org.apache.http.impl.client.RoutedRequest, org.apache.http.protocol.HttpContext) 
        java.lang.Class.getName()
    in method private org.apache.http.HttpResponse tryExecute(org.apache.http.impl.client.RoutedRequest, org.apache.http.protocol.HttpContext) 
        java.lang.Class.getName()
In class org.apache.http.impl.execchain.RetryExec
    in method public org.apache.http.client.methods.CloseableHttpResponse execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware) 
        java.lang.Class.getName()
In class org.java_websocket.server.WebSocketServer
    in method public void start() 
        java.lang.Class.getName()
    in method public void run() 
        java.lang.Class.getName()
In class org.java_websocket.util.Base64$1
    in method public java.lang.Class resolveClass(java.io.ObjectStreamClass) 
        java.lang.Class.forName(java.lang.String, boolean, java.lang.ClassLoader)

1268 classes opened in 2 seconds. 170811K of memory used. 67268K of memory free.

[2014.12.14 12:17:33] Setting trim exclusions...
[2014.12.14 12:17:33] Trimming...
	Using 'F:\DATA\Dev\bukkit_ws\C_Core\C_Build\defaultTrimExclude.txt' for default trim exclusions
[2014.12.14 12:17:35] Obfuscating classes...
	Using internal default exclusions. File 'F:\DATA\Dev\bukkit_ws\C_Core\C_Build\defaultExclude.txt' not found
WARNING: Cannot collapse package 'org.apache.http.client' into 'Core' because : "Non-class files 'org/apache/http/version.properties' and 'org/apache/http/client/version.properties' would clash"
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.auth.GGSSchemeBase$State[] $VALUES'=>'org.apache.http.impl.auth.GGSSchemeBase$State[] a' in class 'org.apache.http.impl.auth.GGSSchemeBase$State'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.HttpClientBuilder this$0'=>'org.apache.http.impl.client.HttpClientBuilder b' in class 'org.apache.http.impl.client.HttpClientBuilder$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.conn.HttpClientConnectionManager val$cm'=>'org.apache.http.conn.HttpClientConnectionManager a' in class 'org.apache.http.impl.client.HttpClientBuilder$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String mimeType'=>'java.lang.String o' in class 'org.apache.http.entity.ContentType'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset p' in class 'org.apache.http.entity.ContentType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.NameValuePair[] params'=>'org.apache.http.NameValuePair[] q' in class 'org.apache.http.entity.ContentType'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.entity.ContentType TEXT_XML'=>'org.apache.http.entity.ContentType k' in class 'org.apache.http.entity.ContentType'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.entity.ContentType TEXT_HTML'=>'org.apache.http.entity.ContentType i' in class 'org.apache.http.entity.ContentType'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.entity.ContentType WILDCARD'=>'org.apache.http.entity.ContentType l' in class 'org.apache.http.entity.ContentType'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.entity.ContentType TEXT_PLAIN'=>'org.apache.http.entity.ContentType j' in class 'org.apache.http.entity.ContentType'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.ssl.StrictHostnameVerifier INSTANCE'=>'org.apache.http.conn.ssl.StrictHostnameVerifier d' in class 'org.apache.http.conn.ssl.StrictHostnameVerifier'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map map'=>'java.util.Map a' in class 'org.apache.http.config.Registry'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int ticksRun'=>'int a' in class 'me.MiniDigger.CraftCore.Holo.CoreHoloHandler$2'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Holo.CoreHoloHandler this$0'=>'me.MiniDigger.CraftCore.Holo.CoreHoloHandler b' in class 'me.MiniDigger.CraftCore.Holo.CoreHoloHandler$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.drafts.Draft_10 this$0'=>'org.java_websocket.drafts.Draft_10 b' in class 'org.java_websocket.drafts.Draft_10$IncompleteException'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.client.WebSocketClient this$0'=>'org.java_websocket.client.WebSocketClient c' in class 'org.java_websocket.client.WebSocketClient$DefaultClientProxyChannel'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map map'=>'java.util.Map b' in class 'org.apache.http.protocol.BasicHttpContext'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil this$0'=>'me.MiniDigger.CraftCore.Util.CoreShutdownUtil a' in class 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'org.apache.http.message.BufferedHeader'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int valuePos'=>'int c' in class 'org.apache.http.message.BufferedHeader'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.CharArrayBuffer buffer'=>'org.apache.http.util.CharArrayBuffer b' in class 'org.apache.http.message.BufferedHeader'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Game.Game game'=>'me.MiniDigger.Core.Game.Game c' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map data'=>'java.util.Map f' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List players'=>'java.util.List e' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.ChatColor color'=>'org.bukkit.ChatColor b' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int size'=>'int d' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.params.HttpParams params'=>'org.apache.http.params.HttpParams b' in class 'org.apache.http.message.AbstractHttpMessage'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int playerX'=>'int c' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List players'=>'java.util.List b' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map words'=>'java.util.Map a' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String msg'=>'java.lang.String d' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String channel'=>'java.lang.String e' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.UUID user'=>'java.util.UUID b' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String server'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.conn.HttpClientConnectionManager manager'=>'org.apache.http.conn.HttpClientConnectionManager b' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object state'=>'java.lang.Object e' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean reusable'=>'boolean d' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.TimeUnit tunit'=>'java.util.concurrent.TimeUnit g' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean released'=>'boolean h' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'net.minecraft.server.v1_8_R1.PacketPlayInClientCommand val$packet'=>'net.minecraft.server.v1_8_R1.PacketPlayInClientCommand b' in class 'me.MiniDigger.CraftCore.Feature.Features.AutoRespawnFeature$1'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$11'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map map'=>'java.util.Map b' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.conn.routing.RouteInfo$TunnelType[] $VALUES'=>'org.apache.http.conn.routing.RouteInfo$TunnelType[] a' in class 'org.apache.http.conn.routing.RouteInfo$TunnelType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List closeables'=>'java.util.List T' in class 'org.apache.http.impl.client.HttpClientBuilder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost proxy'=>'org.apache.http.HttpHost D' in class 'org.apache.http.impl.client.HttpClientBuilder'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String userAgent'=>'java.lang.String C' in class 'org.apache.http.impl.client.HttpClientBuilder'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'javax.net.ssl.SSLContext sslcontext'=>'javax.net.ssl.SSLContext d' in class 'org.apache.http.impl.client.HttpClientBuilder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.auth.HttpAuthenticator'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.ssl.BrowserCompatHostnameVerifier INSTANCE'=>'org.apache.http.conn.ssl.BrowserCompatHostnameVerifier d' in class 'org.apache.http.conn.ssl.BrowserCompatHostnameVerifier'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature this$0'=>'me.MiniDigger.CraftCore.Feature.Features.VoteFeature a' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int code'=>'int g' in class 'org.java_websocket.framing.CloseFrameBuilder'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String reason'=>'java.lang.String h' in class 'org.java_websocket.framing.CloseFrameBuilder'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Object val$route'=>'java.lang.Object e' in class 'org.apache.http.pool.AbstractConnPool$1'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.pool.AbstractConnPool this$0'=>'org.apache.http.pool.AbstractConnPool f' in class 'org.apache.http.pool.AbstractConnPool$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.scheduler.BukkitTask task'=>'org.bukkit.scheduler.BukkitTask a' in class 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList stats'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Stats.CoreStatsHandler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HeaderIterator headerIt'=>'org.apache.http.HeaderIterator a' in class 'org.apache.http.message.BasicTokenIterator'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int searchPos'=>'int d' in class 'org.apache.http.message.BasicTokenIterator'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String mapOne'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList voted'=>'java.util.ArrayList j' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int votesThree'=>'int h' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String mapThree'=>'java.lang.String e' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int votesTwo'=>'int g' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int votesOne'=>'int f' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String mapTwo'=>'java.lang.String d' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int mapCount'=>'int i' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Scoreboard.Scoreboard board'=>'me.MiniDigger.Core.Scoreboard.Scoreboard k' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Command.CommandArgs val$args'=>'me.MiniDigger.Core.Command.CommandArgs d' in class 'me.MiniDigger.CraftCore.Command.Commands.WorldCommands$1'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Command.Commands.WorldCommands this$0'=>'me.MiniDigger.CraftCore.Command.Commands.WorldCommands a' in class 'me.MiniDigger.CraftCore.Command.Commands.WorldCommands$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Map.MapData val$data'=>'me.MiniDigger.Core.Map.MapData b' in class 'me.MiniDigger.CraftCore.Command.Commands.WorldCommands$1'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String gameName'=>'java.lang.String f' in class 'me.MiniDigger.Core.Stats.StatsType$TicTacToe'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType CLICKS'=>'me.MiniDigger.Core.Stats.StatsType g' in class 'me.MiniDigger.Core.Stats.StatsType$TicTacToe'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$10'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object key'=>'java.lang.Object a' in class 'com.minnymin.zephyrus.core.util.map.MultiEntry'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Object firstValue'=>'java.lang.Object b' in class 'com.minnymin.zephyrus.core.util.map.MultiEntry'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int index'=>'int d' in class 'com.minnymin.zephyrus.core.util.map.MultiEntry'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.conn.routing.RouteInfo$LayerType[] $VALUES'=>'org.apache.http.conn.routing.RouteInfo$LayerType[] a' in class 'org.apache.http.conn.routing.RouteInfo$LayerType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.DefaultUserTokenHandler INSTANCE'=>'org.apache.http.impl.client.DefaultUserTokenHandler a' in class 'org.apache.http.impl.client.DefaultUserTokenHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.ssl.AllowAllHostnameVerifier INSTANCE'=>'org.apache.http.conn.ssl.AllowAllHostnameVerifier d' in class 'org.apache.http.conn.ssl.AllowAllHostnameVerifier'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature this$0'=>'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature a' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User val$user'=>'me.MiniDigger.Core.User.User b' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature$1'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location val$loc'=>'org.bukkit.Location c' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature$1'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.config.MessageConstraints DEFAULT'=>'org.apache.http.config.MessageConstraints a' in class 'org.apache.http.config.MessageConstraints'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.BlockingQueue iqueue'=>'java.util.concurrent.BlockingQueue a' in class 'org.java_websocket.server.WebSocketServer$WebSocketWorker'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.server.WebSocketServer this$0'=>'org.java_websocket.server.WebSocketServer c' in class 'org.java_websocket.server.WebSocketServer$WebSocketWorker'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] emptyarray'=>'byte[] a' in class 'org.java_websocket.framing.FramedataImpl1'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean fin'=>'boolean b' in class 'org.java_websocket.framing.FramedataImpl1'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.framing.Framedata$Opcode optcode'=>'org.java_websocket.framing.Framedata$Opcode c' in class 'org.java_websocket.framing.FramedataImpl1'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int decodeSize'=>'int t' in class 'org.apache.commons.codec.binary.Base64'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int encodeSize'=>'int u' in class 'org.apache.commons.codec.binary.Base64'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.channels.ByteChannel channel'=>'java.nio.channels.ByteChannel a' in class 'org.java_websocket.AbstractWrappedByteChannel'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.LinkedList available'=>'java.util.LinkedList c' in class 'org.apache.http.pool.RouteSpecificPool'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object route'=>'java.lang.Object a' in class 'org.apache.http.pool.RouteSpecificPool'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Set leased'=>'java.util.Set b' in class 'org.apache.http.pool.RouteSpecificPool'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.LinkedList pending'=>'java.util.LinkedList d' in class 'org.apache.http.pool.RouteSpecificPool'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int statusCode'=>'int b' in class 'org.apache.http.message.BasicStatusLine'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Stats.CoreStats this$0'=>'me.MiniDigger.CraftCore.Stats.CoreStats a' in class 'me.MiniDigger.CraftCore.Stats.CoreStats$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.ArrayList listener'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map entities'=>'java.util.Map a' in class 'me.MiniDigger.CraftCore.Nametag.CoreNametagHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Phase.Phase phase'=>'me.MiniDigger.Core.Phase.Phase a' in class 'me.MiniDigger.CraftCore.Feature.CoreFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap data'=>'java.util.HashMap a' in class 'me.MiniDigger.CraftCore.Command.Commands.WorldCommands'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType DROPS_2'=>'me.MiniDigger.Core.Stats.StatsType h' in class 'me.MiniDigger.Core.Stats.StatsType$GetTheDrop'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType DROPS_1'=>'me.MiniDigger.Core.Stats.StatsType g' in class 'me.MiniDigger.Core.Stats.StatsType$GetTheDrop'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String gameName'=>'java.lang.String f' in class 'me.MiniDigger.Core.Stats.StatsType$GetTheDrop'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] lines'=>'java.lang.String[] b' in class 'com.bobacadodl.imgmessage.ImageMessage'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.awt.Color[] colors'=>'java.awt.Color[] a' in class 'com.bobacadodl.imgmessage.ImageMessage'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.auth.ChallengeState[] $VALUES'=>'org.apache.http.auth.ChallengeState[] a' in class 'org.apache.http.auth.ChallengeState'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.client.DefaultRedirectStrategy'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.DefaultRedirectStrategy INSTANCE'=>'org.apache.http.impl.client.DefaultRedirectStrategy b' in class 'org.apache.http.impl.client.DefaultRedirectStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset a' in class 'org.apache.http.impl.auth.DigestSchemeFactory'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] content'=>'byte[] d' in class 'org.apache.http.entity.StringEntity'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.conn.ssl.AbstractVerifier'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location val$loc'=>'org.bukkit.Location b' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature$1'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Event.Events.CoreUserDeathEvent val$e'=>'me.MiniDigger.CraftCore.Event.Events.CoreUserDeathEvent a' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature$1'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.File val$script'=>'java.io.File a' in class 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil$3'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int pos'=>'int g' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int readPos'=>'int h' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int lineLength'=>'int d' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int modulus'=>'int k' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] buffer'=>'byte[] f' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean eof'=>'boolean i' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte PAD'=>'byte a' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String infoModule'=>'java.lang.String b' in class 'org.apache.http.util.VersionInfo'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Random r'=>'java.util.Random a' in class 'me.MiniDigger.CraftCore.Util.CoreRandomUtil'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int pending'=>'int b' in class 'org.apache.http.pool.PoolStats'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int max'=>'int d' in class 'org.apache.http.pool.PoolStats'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int available'=>'int c' in class 'org.apache.http.pool.PoolStats'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int leased'=>'int a' in class 'org.apache.http.pool.PoolStats'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.UUID user'=>'java.util.UUID a' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap stats'=>'java.util.HashMap b' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String uri'=>'java.lang.String c' in class 'org.apache.http.message.BasicRequestLine'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String b' in class 'org.apache.http.message.BasicRequestLine'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.entity.Player val$player'=>'org.bukkit.entity.Player c' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI$1$1'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String[] val$lines'=>'java.lang.String[] d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI$1$1'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI$1 this$1'=>'me.MiniDigger.CraftCore.Protocol.CoreSignGUI$1 a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI$1$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.entity.StrictContentLengthStrategy INSTANCE'=>'org.apache.http.impl.entity.StrictContentLengthStrategy a' in class 'org.apache.http.impl.entity.StrictContentLengthStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.ServerSocket socket'=>'java.net.ServerSocket a' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List clients'=>'java.util.List b' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType WINS'=>'me.MiniDigger.Core.Stats.StatsType b' in class 'me.MiniDigger.Core.Stats.StatsType$StatsGame'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType KILLS'=>'me.MiniDigger.Core.Stats.StatsType e' in class 'me.MiniDigger.Core.Stats.StatsType$StatsGame'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String gameName'=>'java.lang.String a' in class 'me.MiniDigger.Core.Stats.StatsType$StatsGame'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType DEATHS'=>'me.MiniDigger.Core.Stats.StatsType c' in class 'me.MiniDigger.Core.Stats.StatsType$StatsGame'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType GAMES'=>'me.MiniDigger.Core.Stats.StatsType d' in class 'me.MiniDigger.Core.Stats.StatsType$StatsGame'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String desc'=>'java.lang.String c' in class 'me.MiniDigger.Core.Protocol.SignChangers$SignChanger'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String perm'=>'java.lang.String b' in class 'me.MiniDigger.Core.Protocol.SignChangers$SignChanger'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String key'=>'java.lang.String a' in class 'me.MiniDigger.Core.Protocol.SignChangers$SignChanger'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.auth.AuthProtocolState[] $VALUES'=>'org.apache.http.auth.AuthProtocolState[] a' in class 'org.apache.http.auth.AuthProtocolState'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.DefaultHttpRequestRetryHandler INSTANCE'=>'org.apache.http.impl.client.DefaultHttpRequestRetryHandler a' in class 'org.apache.http.impl.client.DefaultHttpRequestRetryHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int retryCount'=>'int b' in class 'org.apache.http.impl.client.DefaultHttpRequestRetryHandler'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset a' in class 'org.apache.http.impl.auth.BasicSchemeFactory'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.io.InputStream content'=>'java.io.InputStream d' in class 'org.apache.http.entity.BasicHttpEntity'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long length'=>'long e' in class 'org.apache.http.entity.BasicHttpEntity'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.socket.PlainConnectionSocketFactory INSTANCE'=>'org.apache.http.conn.socket.PlainConnectionSocketFactory a' in class 'org.apache.http.conn.socket.PlainConnectionSocketFactory'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.entity.LivingEntity target'=>'org.bukkit.entity.LivingEntity b' in class 'me.MiniDigger.CraftCore.Command.Commands.ToggleCommands$HomingTask'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.entity.Arrow arrow'=>'org.bukkit.entity.Arrow a' in class 'me.MiniDigger.CraftCore.Command.Commands.ToggleCommands$HomingTask'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset c' in class 'org.apache.http.config.ConnectionConfig$Builder'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int bufferSize'=>'int a' in class 'org.apache.http.config.ConnectionConfig$Builder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignListeners a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners$4'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.event.player.PlayerInteractEvent val$e'=>'org.bukkit.event.player.PlayerInteractEvent c' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners$4'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.block.Sign val$sign'=>'org.bukkit.block.Sign b' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners$4'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpVersion HTTP_0_9'=>'org.apache.http.HttpVersion d' in class 'org.apache.http.HttpVersion'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpVersion HTTP_1_0'=>'org.apache.http.HttpVersion e' in class 'org.apache.http.HttpVersion'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpVersion HTTP_1_1'=>'org.apache.http.HttpVersion f' in class 'org.apache.http.HttpVersion'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Object val$route'=>'java.lang.Object g' in class 'org.apache.http.pool.AbstractConnPool$2'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.pool.AbstractConnPool this$0'=>'org.apache.http.pool.AbstractConnPool i' in class 'org.apache.http.pool.AbstractConnPool$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Object val$state'=>'java.lang.Object h' in class 'org.apache.http.pool.AbstractConnPool$2'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String value'=>'java.lang.String b' in class 'org.apache.http.message.BasicNameValuePair'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'org.apache.http.message.BasicNameValuePair'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList squads'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Squad.CoreSquadHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map listeners'=>'java.util.Map a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.entity.LaxContentLengthStrategy INSTANCE'=>'org.apache.http.impl.entity.LaxContentLengthStrategy a' in class 'org.apache.http.impl.entity.LaxContentLengthStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap spawns'=>'java.util.HashMap f' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean spawn'=>'boolean d' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.HashMap usedSpawns'=>'java.util.HashMap e' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.DyeColor locKey'=>'org.bukkit.DyeColor c' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType PAESSE'=>'me.MiniDigger.Core.Stats.StatsType e' in class 'me.MiniDigger.Core.Stats.StatsType$Common'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType TOKENS'=>'me.MiniDigger.Core.Stats.StatsType b' in class 'me.MiniDigger.Core.Stats.StatsType$Common'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String gameName'=>'java.lang.String a' in class 'me.MiniDigger.Core.Stats.StatsType$Common'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Stats.StatsType SPIELZEIT'=>'me.MiniDigger.Core.Stats.StatsType d' in class 'me.MiniDigger.Core.Stats.StatsType$Common'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers$3'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Entity.CoreEntityType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Class clazz'=>'java.lang.Class c' in class 'me.MiniDigger.CraftCore.Entity.CoreEntityType'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int id'=>'int b' in class 'me.MiniDigger.CraftCore.Entity.CoreEntityType'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy INSTANCE'=>'org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy a' in class 'org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String cnonce'=>'java.lang.String i' in class 'org.apache.http.impl.auth.DigestScheme'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String lastNonce'=>'java.lang.String g' in class 'org.apache.http.impl.auth.DigestScheme'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean complete'=>'boolean f' in class 'org.apache.http.impl.auth.DigestScheme'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String a2'=>'java.lang.String k' in class 'org.apache.http.impl.auth.DigestScheme'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String a1'=>'java.lang.String j' in class 'org.apache.http.impl.auth.DigestScheme'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean chunked'=>'boolean c' in class 'org.apache.http.entity.AbstractHttpEntity'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.event.player.AsyncPlayerChatEvent val$event'=>'org.bukkit.event.player.AsyncPlayerChatEvent a' in class 'me.MiniDigger.CraftCore.Chat.CoreChatListener$1'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset d' in class 'org.apache.http.config.ConnectionConfig'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int bufferSize'=>'int b' in class 'org.apache.http.config.ConnectionConfig'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.config.ConnectionConfig DEFAULT'=>'org.apache.http.config.ConnectionConfig a' in class 'org.apache.http.config.ConnectionConfig'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int port'=>'int a' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender$ServerThread'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender this$0'=>'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender b' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender$ServerThread'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int major'=>'int b' in class 'org.apache.http.ProtocolVersion'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String protocol'=>'java.lang.String a' in class 'org.apache.http.ProtocolVersion'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int minor'=>'int c' in class 'org.apache.http.ProtocolVersion'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.concurrent.FutureCallback callback'=>'org.apache.http.concurrent.FutureCallback b' in class 'org.apache.http.pool.PoolEntryFuture'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.locks.Lock lock'=>'java.util.concurrent.locks.Lock a' in class 'org.apache.http.pool.PoolEntryFuture'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object result'=>'java.lang.Object f' in class 'org.apache.http.pool.PoolEntryFuture'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.locks.Condition condition'=>'java.util.concurrent.locks.Condition c' in class 'org.apache.http.pool.PoolEntryFuture'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean cancelled'=>'boolean d' in class 'org.apache.http.pool.PoolEntryFuture'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean completed'=>'boolean e' in class 'org.apache.http.pool.PoolEntryFuture'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String headerName'=>'java.lang.String d' in class 'org.apache.http.message.BasicListHeaderIterator'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List allHeaders'=>'java.util.List a' in class 'org.apache.http.message.BasicListHeaderIterator'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int lastIndex'=>'int c' in class 'org.apache.http.message.BasicListHeaderIterator'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList members'=>'java.util.ArrayList b' in class 'me.MiniDigger.CraftCore.Squad.CoreSquad'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.UUID owner'=>'java.util.UUID a' in class 'me.MiniDigger.CraftCore.Squad.CoreSquad'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.entity.Player val$player'=>'org.bukkit.entity.Player b' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$13'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$13'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Mirror.CoreMirrorHandler this$0'=>'me.MiniDigger.CraftCore.Mirror.CoreMirrorHandler a' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.CoreMain this$0'=>'me.MiniDigger.CraftCore.CoreMain a' in class 'me.MiniDigger.CraftCore.CoreMain$3'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List hacks'=>'java.util.List a' in class 'me.MiniDigger.CraftCore.Command.Commands.ToggleCommands'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String stat'=>'java.lang.String b' in class 'me.MiniDigger.Core.Stats.StatsType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String game'=>'java.lang.String a' in class 'me.MiniDigger.Core.Stats.StatsType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log b' in class 'org.apache.http.impl.client.InternalHttpClient'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.execchain.ClientExecChain execChain'=>'org.apache.http.impl.execchain.ClientExecChain c' in class 'org.apache.http.impl.client.InternalHttpClient'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List closeables'=>'java.util.List k' in class 'org.apache.http.impl.client.InternalHttpClient'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean complete'=>'boolean e' in class 'org.apache.http.impl.auth.BasicScheme'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Core core'=>'me.MiniDigger.Core.Core b' in class 'me.MiniDigger.CraftCore.CoreMain'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean update'=>'boolean a' in class 'me.MiniDigger.CraftCore.CoreMain'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender this$0'=>'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender a' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender$ClientThread'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean failed'=>'boolean k' in class 'org.java_websocket.drafts.Draft_76'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log j' in class 'org.apache.http.impl.conn.CPoolEntry'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicLineParser DEFAULT'=>'org.apache.http.message.BasicLineParser a' in class 'org.apache.http.message.BasicLineParser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.ProtocolVersion protocol'=>'org.apache.http.ProtocolVersion c' in class 'org.apache.http.message.BasicLineParser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicLineParser INSTANCE'=>'org.apache.http.message.BasicLineParser b' in class 'org.apache.http.message.BasicLineParser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler this$0'=>'me.MiniDigger.CraftCore.Socket.CoreSocketHandler a' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$12'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User val$user'=>'me.MiniDigger.Core.User.User b' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$12'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.block.Sign val$sign'=>'org.bukkit.block.Sign c' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$12'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean oneHeader'=>'boolean b' in class 'org.apache.http.impl.cookie.RFC2965SpecProvider'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.cookie.CookieSpec cookieSpec'=>'org.apache.http.cookie.CookieSpec c' in class 'org.apache.http.impl.cookie.RFC2965SpecProvider'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Mirror.MirrorSender sender'=>'me.MiniDigger.Core.Mirror.MirrorSender a' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int teamCount'=>'int e' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List teams'=>'java.util.List c' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int teamSize'=>'int d' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Phase.Phase next'=>'me.MiniDigger.Core.Phase.Phase f' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.CoreMain this$0'=>'me.MiniDigger.CraftCore.CoreMain a' in class 'me.MiniDigger.CraftCore.CoreMain$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.client.CloseableHttpClient'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map params'=>'java.util.Map c' in class 'org.apache.http.impl.auth.RFC2617Scheme'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean connected'=>'boolean c' in class 'org.apache.http.conn.routing.RouteTracker'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean secure'=>'boolean g' in class 'org.apache.http.conn.routing.RouteTracker'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled'=>'org.apache.http.conn.routing.RouteInfo$TunnelType e' in class 'org.apache.http.conn.routing.RouteTracker'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost[] proxyChain'=>'org.apache.http.HttpHost[] d' in class 'org.apache.http.conn.routing.RouteTracker'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.conn.routing.RouteInfo$LayerType layered'=>'org.apache.http.conn.routing.RouteInfo$LayerType f' in class 'org.apache.http.conn.routing.RouteTracker'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost targetHost'=>'org.apache.http.HttpHost a' in class 'org.apache.http.conn.routing.RouteTracker'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'short[] layer'=>'short[] a' in class 'me.MiniDigger.CraftCore.Generator.CoreCleanroomChunkGenerator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.Socket client'=>'java.net.Socket a' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorReciever$InputThread'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String cookieSpec'=>'java.lang.String e' in class 'org.apache.http.client.config.RequestConfig$Builder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost proxy'=>'org.apache.http.HttpHost b' in class 'org.apache.http.client.config.RequestConfig$Builder'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean inframe'=>'boolean g' in class 'org.java_websocket.drafts.Draft_75'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long updated'=>'long f' in class 'org.apache.http.pool.PoolEntry'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object route'=>'java.lang.Object b' in class 'org.apache.http.pool.PoolEntry'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long expiry'=>'long g' in class 'org.apache.http.pool.PoolEntry'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long created'=>'long d' in class 'org.apache.http.pool.PoolEntry'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object state'=>'java.lang.Object h' in class 'org.apache.http.pool.PoolEntry'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object conn'=>'java.lang.Object c' in class 'org.apache.http.pool.PoolEntry'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String id'=>'java.lang.String a' in class 'org.apache.http.pool.PoolEntry'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicLineFormatter INSTANCE'=>'org.apache.http.message.BasicLineFormatter b' in class 'org.apache.http.message.BasicLineFormatter'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicLineFormatter DEFAULT'=>'org.apache.http.message.BasicLineFormatter a' in class 'org.apache.http.message.BasicLineFormatter'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Socket.SocketServer server'=>'me.MiniDigger.Core.Socket.SocketServer b' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List sessions'=>'java.util.List a' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Socket.SocketClient client'=>'me.MiniDigger.Core.Socket.SocketClient c' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList edit'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.ArrayList justJoined'=>'java.util.ArrayList e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Class[] events'=>'java.lang.Class[] a' in class 'me.MiniDigger.CraftCore.Mirror.CoreEventHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.ArrayList blacklist'=>'java.util.ArrayList b' in class 'me.MiniDigger.CraftCore.Mirror.CoreEventHandler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.HashMap respawns'=>'java.util.HashMap d' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamDeathMatchFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.CoreMain this$0'=>'me.MiniDigger.CraftCore.CoreMain a' in class 'me.MiniDigger.CraftCore.CoreMain$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String desc'=>'java.lang.String c' in class 'me.MiniDigger.Core.Protocol.SkullChangers$SkullChanger'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String perm'=>'java.lang.String b' in class 'me.MiniDigger.Core.Protocol.SkullChangers$SkullChanger'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String key'=>'java.lang.String a' in class 'me.MiniDigger.Core.Protocol.SkullChangers$SkullChanger'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Game.GameType type'=>'me.MiniDigger.Core.Game.GameType d' in class 'me.MiniDigger.Core.Prefix.Prefix'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.ChatColor klammer'=>'org.bukkit.ChatColor a' in class 'me.MiniDigger.Core.Prefix.Prefix'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.ChatColor color'=>'org.bukkit.ChatColor b' in class 'me.MiniDigger.Core.Prefix.Prefix'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String c' in class 'me.MiniDigger.Core.Prefix.Prefix'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.conn.Wire'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String id'=>'java.lang.String b' in class 'org.apache.http.impl.conn.Wire'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.ConcurrentHashMap credMap'=>'java.util.concurrent.ConcurrentHashMap a' in class 'org.apache.http.impl.client.BasicCredentialsProvider'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String challenge'=>'java.lang.String e' in class 'org.apache.http.impl.auth.NTLMScheme'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.auth.NTLMScheme$State state'=>'org.apache.http.impl.auth.NTLMScheme$State d' in class 'org.apache.http.impl.auth.NTLMScheme'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.auth.NTLMEngine engine'=>'org.apache.http.impl.auth.NTLMEngine c' in class 'org.apache.http.impl.auth.NTLMScheme'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.BitSet PATHSAFE'=>'java.util.BitSet f' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.BitSet RESERVED'=>'java.util.BitSet h' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.BitSet URIC'=>'java.util.BitSet g' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.BitSet UNRESERVED'=>'java.util.BitSet c' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.BitSet PUNCT'=>'java.util.BitSet d' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.BitSet USERINFO'=>'java.util.BitSet e' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char[] QP_SEPS'=>'char[] a' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.BitSet URLENCODER'=>'java.util.BitSet i' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.client.config.RequestConfig DEFAULT'=>'org.apache.http.client.config.RequestConfig a' in class 'org.apache.http.client.config.RequestConfig'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String cookieSpec'=>'java.lang.String f' in class 'org.apache.http.client.config.RequestConfig'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost proxy'=>'org.apache.http.HttpHost c' in class 'org.apache.http.client.config.RequestConfig'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicHeaderValueParser DEFAULT'=>'org.apache.http.message.BasicHeaderValueParser a' in class 'org.apache.http.message.BasicHeaderValueParser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicHeaderValueParser INSTANCE'=>'org.apache.http.message.BasicHeaderValueParser b' in class 'org.apache.http.message.BasicHeaderValueParser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Socket.Client.Client client'=>'me.MiniDigger.Core.Socket.Client.Client c' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean identified'=>'boolean d' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.InetSocketAddress address'=>'java.net.InetSocketAddress b' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List mapNames'=>'java.util.List d' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.configuration.file.FileConfiguration con'=>'org.bukkit.configuration.file.FileConfiguration e' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.File mapFolder'=>'java.io.File b' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList maps'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.File mapConfig'=>'java.io.File c' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Command.CoreCommandHandler this$0'=>'me.MiniDigger.CraftCore.Command.CoreCommandHandler a' in class 'me.MiniDigger.CraftCore.Command.CoreCommandHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.reflect.Method val$method'=>'java.lang.reflect.Method b' in class 'me.MiniDigger.CraftCore.Command.CoreCommandHandler$1'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'mkremins.fanciful.FancyMessage prefix'=>'mkremins.fanciful.FancyMessage e' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String hearPerm'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String speakPerm'=>'java.lang.String d' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean global'=>'boolean f' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.ChatColor color'=>'org.bukkit.ChatColor b' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int closecode'=>'int a' in class 'org.java_websocket.exceptions.InvalidDataException'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Item.Item item'=>'me.MiniDigger.Core.Item.Item a' in class 'me.MiniDigger.Core.Item.ItemType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.TreeSet cookies'=>'java.util.TreeSet a' in class 'org.apache.http.impl.client.BasicCookieStore'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.auth.BasicUserPrincipal principal'=>'org.apache.http.auth.BasicUserPrincipal a' in class 'org.apache.http.auth.UsernamePasswordCredentials'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String password'=>'java.lang.String b' in class 'org.apache.http.auth.UsernamePasswordCredentials'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object[] _array'=>'java.lang.Object[] a' in class 'net.amoebaman.util.ArrayWrapper'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList clients'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClientHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicHeaderValueFormatter INSTANCE'=>'org.apache.http.message.BasicHeaderValueFormatter b' in class 'org.apache.http.message.BasicHeaderValueFormatter'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.message.BasicHeaderValueFormatter DEFAULT'=>'org.apache.http.message.BasicHeaderValueFormatter a' in class 'org.apache.http.message.BasicHeaderValueFormatter'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.io.HttpTransportMetricsImpl metrics'=>'org.apache.http.impl.io.HttpTransportMetricsImpl b' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.ByteArrayBuffer buffer'=>'org.apache.http.util.ByteArrayBuffer c' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.CharsetEncoder encoder'=>'java.nio.charset.CharsetEncoder e' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.ByteBuffer bbuf'=>'java.nio.ByteBuffer g' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] CRLF'=>'byte[] a' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.OutputStream outstream'=>'java.io.OutputStream f' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap locs'=>'java.util.HashMap b' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.inventory.ItemStack item'=>'org.bukkit.inventory.ItemStack f' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int interval'=>'int c' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location[] locs'=>'org.bukkit.Location[] g' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.entity.EntityType type'=>'org.bukkit.entity.EntityType d' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.DyeColor locKey'=>'org.bukkit.DyeColor e' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.command.CommandMap map'=>'org.bukkit.command.CommandMap b' in class 'me.MiniDigger.CraftCore.Command.CoreCommandHandler'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.plugin.Plugin plugin'=>'org.bukkit.plugin.Plugin c' in class 'me.MiniDigger.CraftCore.Command.CoreCommandHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'com.minnymin.zephyrus.core.util.map.MultiMap commandMap'=>'com.minnymin.zephyrus.core.util.map.MultiMap a' in class 'me.MiniDigger.CraftCore.Command.CoreCommandHandler'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean async'=>'boolean c' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String key'=>'java.lang.String a' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Protocol.SignListeners$SignAction action'=>'me.MiniDigger.Core.Protocol.SignListeners$SignAction b' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpResponse response'=>'org.apache.http.HttpResponse b' in class 'org.apache.http.impl.execchain.TunnelRefusedException'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.Core.Game.GameType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String abk'=>'java.lang.String b' in class 'me.MiniDigger.Core.Game.GameType'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Class game'=>'java.lang.Class c' in class 'me.MiniDigger.Core.Game.GameType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.SystemDefaultDnsResolver INSTANCE'=>'org.apache.http.impl.conn.SystemDefaultDnsResolver a' in class 'org.apache.http.impl.conn.SystemDefaultDnsResolver'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.client.BasicAuthCache'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map map'=>'java.util.Map b' in class 'org.apache.http.impl.client.BasicAuthCache'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int port'=>'int g' in class 'org.apache.http.client.utils.URIBuilder'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String path'=>'java.lang.String h' in class 'org.apache.http.client.utils.URIBuilder'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset m' in class 'org.apache.http.client.utils.URIBuilder'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String fragment'=>'java.lang.String n' in class 'org.apache.http.client.utils.URIBuilder'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String query'=>'java.lang.String l' in class 'org.apache.http.client.utils.URIBuilder'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String scheme'=>'java.lang.String a' in class 'org.apache.http.client.utils.URIBuilder'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String host'=>'java.lang.String f' in class 'org.apache.http.client.utils.URIBuilder'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String userInfo'=>'java.lang.String d' in class 'org.apache.http.client.utils.URIBuilder'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int newsize'=>'int a' in class 'org.java_websocket.exceptions.IncompleteHandshakeException'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String ntname'=>'java.lang.String c' in class 'org.apache.http.auth.NTUserPrincipal'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String domain'=>'java.lang.String b' in class 'org.apache.http.auth.NTUserPrincipal'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String username'=>'java.lang.String a' in class 'org.apache.http.auth.NTUserPrincipal'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocket$Role role'=>'org.java_websocket.WebSocket$Role d' in class 'org.java_websocket.drafts.Draft'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String _key'=>'java.lang.String a' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map _value'=>'java.util.Map b' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char[] buffer'=>'char[] a' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int len'=>'int b' in class 'org.apache.http.util.CharArrayBuffer'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap entitys'=>'java.util.HashMap a' in class 'me.MiniDigger.CraftCore.Util.CoreEntityUtil'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClient'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String password'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClient'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.message.HeaderValueParser parser'=>'org.apache.http.message.HeaderValueParser b' in class 'org.apache.http.message.BasicHeaderElementIterator'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HeaderIterator headerIt'=>'org.apache.http.HeaderIterator a' in class 'org.apache.http.message.BasicHeaderElementIterator'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.message.ParserCursor cursor'=>'org.apache.http.message.ParserCursor e' in class 'org.apache.http.message.BasicHeaderElementIterator'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.CharArrayBuffer buffer'=>'org.apache.http.util.CharArrayBuffer d' in class 'org.apache.http.message.BasicHeaderElementIterator'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.io.HttpTransportMetricsImpl metrics'=>'org.apache.http.impl.io.HttpTransportMetricsImpl a' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int bufferpos'=>'int h' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] buffer'=>'byte[] b' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.InputStream instream'=>'java.io.InputStream g' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int bufferlen'=>'int i' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.CharsetDecoder decoder'=>'java.nio.charset.CharsetDecoder f' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.CharBuffer cbuf'=>'java.nio.CharBuffer j' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.util.ByteArrayBuffer linebuffer'=>'org.apache.http.util.ByteArrayBuffer c' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String fame'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'com.comphenix.protocol.ProtocolManager manager'=>'com.comphenix.protocol.ProtocolManager b' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.License.CoreLicenseHandler this$0'=>'me.MiniDigger.CraftCore.License.CoreLicenseHandler a' in class 'me.MiniDigger.CraftCore.License.CoreLicenseHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List usedSpawns'=>'java.util.List e' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location[] spawns'=>'org.bukkit.Location[] f' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean spawn'=>'boolean d' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.DyeColor locKey'=>'org.bukkit.DyeColor c' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.command.Command command'=>'org.bukkit.command.Command b' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.command.CommandSender sender'=>'org.bukkit.command.CommandSender a' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String label'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User user'=>'me.MiniDigger.Core.User.User e' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] args'=>'java.lang.String[] d' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignListeners d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners$3'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData configData'=>'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData a' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$InternalConnectionFactory'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.TargetAuthenticationStrategy INSTANCE'=>'org.apache.http.impl.client.TargetAuthenticationStrategy e' in class 'org.apache.http.impl.client.TargetAuthenticationStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log c' in class 'org.apache.http.impl.auth.GGSSchemeBase'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.auth.GGSSchemeBase$State state'=>'org.apache.http.impl.auth.GGSSchemeBase$State g' in class 'org.apache.http.impl.auth.GGSSchemeBase'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] token'=>'byte[] h' in class 'org.apache.http.impl.auth.GGSSchemeBase'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean stripPort'=>'boolean e' in class 'org.apache.http.impl.auth.GGSSchemeBase'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int port'=>'int b' in class 'org.apache.http.cookie.CookieOrigin'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String path'=>'java.lang.String c' in class 'org.apache.http.cookie.CookieOrigin'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean secure'=>'boolean d' in class 'org.apache.http.cookie.CookieOrigin'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String host'=>'java.lang.String a' in class 'org.apache.http.cookie.CookieOrigin'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean secure'=>'boolean f' in class 'org.apache.http.conn.routing.HttpRoute'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.routing.RouteInfo$TunnelType tunnelled'=>'org.apache.http.conn.routing.RouteInfo$TunnelType d' in class 'org.apache.http.conn.routing.HttpRoute'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.conn.routing.RouteInfo$LayerType layered'=>'org.apache.http.conn.routing.RouteInfo$LayerType e' in class 'org.apache.http.conn.routing.HttpRoute'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List proxyChain'=>'java.util.List c' in class 'org.apache.http.conn.routing.HttpRoute'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost targetHost'=>'org.apache.http.HttpHost a' in class 'org.apache.http.conn.routing.HttpRoute'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User user'=>'me.MiniDigger.Core.User.User c' in class 'me.MiniDigger.CraftCore.Event.Events.CoreUserDeathEvent'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.auth.NTUserPrincipal principal'=>'org.apache.http.auth.NTUserPrincipal a' in class 'org.apache.http.auth.NTCredentials'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String password'=>'java.lang.String b' in class 'org.apache.http.auth.NTCredentials'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.client.WebSocketClient this$0'=>'org.java_websocket.client.WebSocketClient a' in class 'org.java_websocket.client.WebSocketClient$WebsocketWriteThread'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String _key'=>'java.lang.String a' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String _value'=>'java.lang.String b' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] buffer'=>'byte[] a' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int len'=>'int b' in class 'org.apache.http.util.ByteArrayBuffer'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.atomic.AtomicLong COUNTER'=>'java.util.concurrent.atomic.AtomicLong l' in class 'org.apache.http.impl.conn.CPool'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log m' in class 'org.apache.http.impl.conn.CPool'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.TimeUnit tunit'=>'java.util.concurrent.TimeUnit o' in class 'org.apache.http.impl.conn.CPool'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long timeToLive'=>'long n' in class 'org.apache.http.impl.conn.CPool'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String value'=>'java.lang.String b' in class 'org.apache.http.message.BasicHeaderElement'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'org.apache.http.message.BasicHeaderElement'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.NameValuePair[] parameters'=>'org.apache.http.NameValuePair[] c' in class 'org.apache.http.message.BasicHeaderElement'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Server.CoreServerHandler this$0'=>'me.MiniDigger.CraftCore.Server.CoreServerHandler a' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase this$0'=>'me.MiniDigger.CraftCore.Phase.CoreTimedPhase b' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int passed'=>'int a' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String licence'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.License.CoreLicenseHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean failed'=>'boolean c' in class 'me.MiniDigger.CraftCore.License.CoreLicenseHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean pvpEnabled'=>'boolean c' in class 'me.MiniDigger.CraftCore.Feature.Features.PvPFeature'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map completers'=>'java.util.Map a' in class 'me.MiniDigger.CraftCore.Command.CoreBukkitCompleter'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap blocks'=>'java.util.HashMap b' in class 'me.MiniDigger.CraftCore.Block.CoreBuildHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.ArrayList builders'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Block.CoreBuildHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignListeners d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.ProxyAuthenticationStrategy INSTANCE'=>'org.apache.http.impl.client.ProxyAuthenticationStrategy e' in class 'org.apache.http.impl.client.ProxyAuthenticationStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.TimeZone GMT'=>'java.util.TimeZone c' in class 'org.apache.http.client.utils.DateUtils'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean isShutDown'=>'boolean h' in class 'org.apache.http.pool.AbstractConnPool'. Given that the prefix 'is' is common, only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.LinkedList available'=>'java.util.LinkedList e' in class 'org.apache.http.pool.AbstractConnPool'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.locks.Lock lock'=>'java.util.concurrent.locks.Lock a' in class 'org.apache.http.pool.AbstractConnPool'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Set leased'=>'java.util.Set d' in class 'org.apache.http.pool.AbstractConnPool'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.LinkedList pending'=>'java.util.LinkedList f' in class 'org.apache.http.pool.AbstractConnPool'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int maxTotal'=>'int j' in class 'org.apache.http.pool.AbstractConnPool'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Date val$d1'=>'java.util.Date b' in class 'me.MiniDigger.CraftCore.Util.CoreCommonMethods$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User val$user'=>'me.MiniDigger.Core.User.User a' in class 'me.MiniDigger.CraftCore.Util.CoreCommonMethods$1'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String value'=>'java.lang.String b' in class 'org.apache.http.message.BasicHeader'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'org.apache.http.message.BasicHeader'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList servers'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.scheduler.BukkitTask task'=>'org.bukkit.scheduler.BukkitTask b' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.io.DefaultHttpResponseParserFactory INSTANCE'=>'org.apache.http.impl.io.DefaultHttpResponseParserFactory a' in class 'org.apache.http.impl.io.DefaultHttpResponseParserFactory'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.LineParser lineParser'=>'org.apache.http.message.LineParser b' in class 'org.apache.http.impl.io.DefaultHttpResponseParserFactory'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Phase.CorePhase this$0'=>'me.MiniDigger.CraftCore.Phase.CorePhase a' in class 'me.MiniDigger.CraftCore.Phase.CorePhase$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.cookie.CommonCookieAttributeHandler handler'=>'org.apache.http.cookie.CommonCookieAttributeHandler a' in class 'org.apache.http.impl.cookie.PublicSuffixDomainFilter'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List kits'=>'java.util.List a' in class 'me.MiniDigger.CraftCore.Kit.CoreKitHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.HashMap activKits'=>'java.util.HashMap b' in class 'me.MiniDigger.CraftCore.Kit.CoreKitHandler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.security.MessageDigest digester'=>'java.security.MessageDigest a' in class 'org.apache.http.impl.auth.HttpEntityDigester'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] digest'=>'byte[] c' in class 'org.apache.http.impl.auth.HttpEntityDigester'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean b' in class 'org.apache.http.impl.auth.HttpEntityDigester'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignListeners d' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost host'=>'org.apache.http.HttpHost a' in class 'org.apache.http.conn.ConnectTimeoutException'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.io.SessionInputBuffer in'=>'org.apache.http.io.SessionInputBuffer a' in class 'org.apache.http.impl.io.IdentityInputStream'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean b' in class 'org.apache.http.impl.io.IdentityInputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long pos'=>'long b' in class 'org.apache.http.impl.io.ContentLengthInputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.io.SessionInputBuffer in'=>'org.apache.http.io.SessionInputBuffer d' in class 'org.apache.http.impl.io.ContentLengthInputStream'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean c' in class 'org.apache.http.impl.io.ContentLengthInputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String verb'=>'java.lang.String a' in class 'me.MiniDigger.Core.Error.ErrorLevel'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int pos'=>'int f' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.io.SessionInputBuffer in'=>'org.apache.http.io.SessionInputBuffer a' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean eof'=>'boolean g' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.Header[] footers'=>'org.apache.http.Header[] i' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.CharArrayBuffer buffer'=>'org.apache.http.util.CharArrayBuffer b' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int chunkSize'=>'int e' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean h' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int state'=>'int d' in class 'org.apache.http.impl.io.ChunkedInputStream'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.Wire wire'=>'org.apache.http.impl.conn.Wire b' in class 'org.apache.http.impl.conn.LoggingInputStream'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.io.InputStream in'=>'java.io.InputStream a' in class 'org.apache.http.impl.conn.LoggingInputStream'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean selfClosed'=>'boolean b' in class 'org.apache.http.conn.EofSensorInputStream'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.conn.EofSensorWatcher eofWatcher'=>'org.apache.http.conn.EofSensorWatcher c' in class 'org.apache.http.conn.EofSensorInputStream'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int position'=>'int b' in class 'org.java_websocket.util.Base64$OutputStream'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int lineLength'=>'int e' in class 'org.java_websocket.util.Base64$OutputStream'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean encode'=>'boolean a' in class 'org.java_websocket.util.Base64$OutputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean breakLines'=>'boolean f' in class 'org.java_websocket.util.Base64$OutputStream'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] decodabet'=>'byte[] j' in class 'org.java_websocket.util.Base64$OutputStream'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] b4'=>'byte[] g' in class 'org.java_websocket.util.Base64$OutputStream'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] buffer'=>'byte[] c' in class 'org.java_websocket.util.Base64$OutputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int options'=>'int i' in class 'org.java_websocket.util.Base64$OutputStream'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignGUI a' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignGUI$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager this$0'=>'org.apache.http.impl.conn.PoolingHttpClientConnectionManager b' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.Future val$future'=>'java.util.concurrent.Future a' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$8'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.client.AuthenticationStrategyImpl'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String headerName'=>'java.lang.String d' in class 'org.apache.http.impl.client.AuthenticationStrategyImpl'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$7'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.NoConnectionReuseStrategy INSTANCE'=>'org.apache.http.impl.NoConnectionReuseStrategy a' in class 'org.apache.http.impl.NoConnectionReuseStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$6'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$5'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$4'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean cancel'=>'boolean c' in class 'me.MiniDigger.CraftCore.Event.CoreCancelableEvent'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler a' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler$3'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList styles'=>'java.util.ArrayList b' in class 'mkremins.fanciful.MessagePart'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'mkremins.fanciful.TextualComponent text'=>'mkremins.fanciful.TextualComponent g' in class 'mkremins.fanciful.MessagePart'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.ChatColor color'=>'org.bukkit.ChatColor a' in class 'mkremins.fanciful.MessagePart'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int code'=>'int f' in class 'org.apache.http.message.BasicHttpResponse'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.StatusLine statusline'=>'org.apache.http.StatusLine d' in class 'org.apache.http.message.BasicHttpResponse'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.ProtocolVersion ver'=>'org.apache.http.ProtocolVersion e' in class 'org.apache.http.message.BasicHttpResponse'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpEntity entity'=>'org.apache.http.HttpEntity h' in class 'org.apache.http.message.BasicHttpResponse'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Locale locale'=>'java.util.Locale j' in class 'org.apache.http.message.BasicHttpResponse'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean join'=>'boolean f' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int numPlayers'=>'int c' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String phase'=>'java.lang.String e' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean spectate'=>'boolean g' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int maxPlayers'=>'int d' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean online'=>'boolean h' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int players'=>'int e' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.io.DefaultHttpRequestWriterFactory INSTANCE'=>'org.apache.http.impl.io.DefaultHttpRequestWriterFactory a' in class 'org.apache.http.impl.io.DefaultHttpRequestWriterFactory'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String perm'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.inventory.ItemStack[] content'=>'org.bukkit.inventory.ItemStack[] e' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.inventory.ItemStack[] armor'=>'org.bukkit.inventory.ItemStack[] f' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int charge'=>'int d' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int id'=>'int a' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.cookie.CookieSpec cookieSpec'=>'org.apache.http.cookie.CookieSpec b' in class 'org.apache.http.impl.cookie.NetscapeDraftSpecProvider'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List allowed'=>'java.util.List d' in class 'me.MiniDigger.CraftCore.Feature.Features.MobFeature'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String world'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Feature.Features.MobFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.reflect.Method sendPacket'=>'java.lang.reflect.Method d' in class 'me.MiniDigger.CraftCore.Command.Commands.ForceCredits'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.reflect.Method getHandle'=>'java.lang.reflect.Method b' in class 'me.MiniDigger.CraftCore.Command.Commands.ForceCredits'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object world'=>'java.lang.Object m' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String l' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'float health'=>'float j' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object dragon'=>'java.lang.Object n' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte yvel'=>'byte h' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean visible'=>'boolean k' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int pitch'=>'int e' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int yaw'=>'int f' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte xvel'=>'byte g' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int id'=>'int a' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int z'=>'int d' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int x'=>'int b' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte zvel'=>'byte i' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int y'=>'int c' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.entity.Player player'=>'org.bukkit.entity.Player b' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.block.Sign sign'=>'org.bukkit.block.Sign a' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User user'=>'me.MiniDigger.Core.User.User c' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String b' in class 'me.MiniDigger.Core.Error.Error'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Error.ErrorType type'=>'me.MiniDigger.Core.Error.ErrorType d' in class 'me.MiniDigger.Core.Error.Error'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Error.ErrorLevel level'=>'me.MiniDigger.Core.Error.ErrorLevel e' in class 'me.MiniDigger.Core.Error.Error'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String id'=>'java.lang.String a' in class 'me.MiniDigger.Core.Error.Error'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String message'=>'java.lang.String c' in class 'me.MiniDigger.Core.Error.Error'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData configData'=>'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$ConfigData b' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.atomic.AtomicBoolean isShutDown'=>'java.util.concurrent.atomic.AtomicBoolean e' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Given that the prefix 'is' is common, only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.CPool pool'=>'org.apache.http.impl.conn.CPool c' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean stripPort'=>'boolean a' in class 'org.apache.http.impl.auth.SPNegoSchemeFactory'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.client.protocol.ResponseProcessCookies'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.event.HandlerList handlers'=>'org.bukkit.event.HandlerList a' in class 'me.MiniDigger.CraftCore.Event.CoreEvent'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String hostname'=>'java.lang.String a' in class 'org.apache.http.HttpHost'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int port'=>'int c' in class 'org.apache.http.HttpHost'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String lcHostname'=>'java.lang.String b' in class 'org.apache.http.HttpHost'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String schemeName'=>'java.lang.String d' in class 'org.apache.http.HttpHost'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.InetAddress address'=>'java.net.InetAddress e' in class 'org.apache.http.HttpHost'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String userAgent'=>'java.lang.String a' in class 'org.apache.http.protocol.RequestUserAgent'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String _value'=>'java.lang.String a' in class 'mkremins.fanciful.JsonString'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char mc'=>'char c' in class 'me.MiniDigger.CraftCore.Util.CoreChatColorUtil'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char and'=>'char b' in class 'me.MiniDigger.CraftCore.Util.CoreChatColorUtil'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String uri'=>'java.lang.String e' in class 'org.apache.http.message.BasicHttpRequest'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String d' in class 'org.apache.http.message.BasicHttpRequest'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.scoreboard.DisplaySlot slot'=>'org.bukkit.scoreboard.DisplaySlot c' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean scrolling'=>'boolean d' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String content'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int id'=>'int a' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String orig'=>'java.lang.String e' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.cookie.NetscapeDraftHeaderParser DEFAULT'=>'org.apache.http.impl.cookie.NetscapeDraftHeaderParser a' in class 'org.apache.http.impl.cookie.NetscapeDraftHeaderParser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Map.MapData map'=>'me.MiniDigger.Core.Map.MapData c' in class 'me.MiniDigger.CraftCore.Feature.Features.MapFeature'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Command.CommandArgs val$args'=>'me.MiniDigger.Core.Command.CommandArgs b' in class 'me.MiniDigger.CraftCore.Command.Commands.EssentialCommands$1'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.entity.EntityType val$type'=>'org.bukkit.entity.EntityType c' in class 'me.MiniDigger.CraftCore.Command.Commands.EssentialCommands$1'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int val$fC'=>'int a' in class 'me.MiniDigger.CraftCore.Command.Commands.EssentialCommands$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map DRAGONS'=>'java.util.Map a' in class 'me.MiniDigger.CraftCore.Bar.CoreBarHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.atomic.AtomicLong COUNTER'=>'java.util.concurrent.atomic.AtomicLong a' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log c' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory INSTANCE'=>'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory b' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log headerlog'=>'org.apache.commons.logging.Log d' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log wirelog'=>'org.apache.commons.logging.Log e' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.EnglishReasonPhraseCatalog INSTANCE'=>'org.apache.http.impl.EnglishReasonPhraseCatalog a' in class 'org.apache.http.impl.EnglishReasonPhraseCatalog'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.command.CommandExecutor executor'=>'org.bukkit.command.CommandExecutor b' in class 'me.MiniDigger.CraftCore.Command.CoreBukkitCommand'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Command.BukkitCompleter completer'=>'me.MiniDigger.Core.Command.BukkitCompleter c' in class 'me.MiniDigger.CraftCore.Command.CoreBukkitCommand'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.server.WebSocketServer$WebSocketWorker this$1'=>'org.java_websocket.server.WebSocketServer$WebSocketWorker b' in class 'org.java_websocket.server.WebSocketServer$WebSocketWorker$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.java_websocket.server.WebSocketServer val$this$0'=>'org.java_websocket.server.WebSocketServer a' in class 'org.java_websocket.server.WebSocketServer$WebSocketWorker$1'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String username'=>'java.lang.String a' in class 'org.apache.http.auth.BasicUserPrincipal'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String f' in class 'org.apache.http.impl.client.RequestWrapper'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.ProtocolVersion version'=>'org.apache.http.ProtocolVersion g' in class 'org.apache.http.impl.client.RequestWrapper'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpRequest original'=>'org.apache.http.HttpRequest d' in class 'org.apache.http.impl.client.RequestWrapper'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.URI uri'=>'java.net.URI e' in class 'org.apache.http.impl.client.RequestWrapper'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap boards'=>'java.util.HashMap a' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.CharArrayBuffer lineBuf'=>'org.apache.http.util.CharArrayBuffer b' in class 'org.apache.http.impl.io.AbstractMessageWriter'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.cookie.CookieSpec cookieSpec'=>'org.apache.http.cookie.CookieSpec a' in class 'org.apache.http.impl.cookie.IgnoreSpecProvider'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int max'=>'int d' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap lives'=>'java.util.HashMap c' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map loaders'=>'java.util.Map e' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.File addOnFile'=>'java.io.File a' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList active'=>'java.util.ArrayList c' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.json.simple.JSONArray addOns'=>'org.json.simple.JSONArray b' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map classes'=>'java.util.Map d' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char c'=>'char a' in class 'com.bobacadodl.imgmessage.ImageChar'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.DefaultSchemePortResolver INSTANCE'=>'org.apache.http.impl.conn.DefaultSchemePortResolver a' in class 'org.apache.http.impl.conn.DefaultSchemePortResolver'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] sessionKey'=>'byte[] i' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type3Message'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] hostBytes'=>'byte[] e' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type3Message'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] lmResp'=>'byte[] g' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type3Message'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int type2Flags'=>'int c' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type3Message'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] userBytes'=>'byte[] f' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type3Message'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] ntResp'=>'byte[] h' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type3Message'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.DefaultHttpResponseFactory INSTANCE'=>'org.apache.http.impl.DefaultHttpResponseFactory a' in class 'org.apache.http.impl.DefaultHttpResponseFactory'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.auth.AuthScheme authScheme'=>'org.apache.http.auth.AuthScheme b' in class 'org.apache.http.auth.AuthState'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.auth.AuthScope authScope'=>'org.apache.http.auth.AuthScope c' in class 'org.apache.http.auth.AuthState'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.auth.AuthProtocolState state'=>'org.apache.http.auth.AuthProtocolState a' in class 'org.apache.http.auth.AuthState'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean overwrite'=>'boolean a' in class 'org.apache.http.protocol.RequestContent'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String jsonString'=>'java.lang.String b' in class 'mkremins.fanciful.FancyMessage'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean dirty'=>'boolean c' in class 'mkremins.fanciful.FancyMessage'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpEntity entity'=>'org.apache.http.HttpEntity j' in class 'org.apache.http.client.methods.HttpRequestWrapper$HttpEntityEnclosingRequestWrapper'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String title'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.scheduler.BukkitRunnable task'=>'org.bukkit.scheduler.BukkitRunnable d' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List lines'=>'java.util.List a' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List scolling'=>'java.util.List b' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.CharArrayBuffer lineBuf'=>'org.apache.http.util.CharArrayBuffer h' in class 'org.apache.http.impl.io.DefaultHttpResponseParser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean oneHeader'=>'boolean d' in class 'org.apache.http.impl.cookie.DefaultCookieSpecProvider'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.cookie.CookieSpec cookieSpec'=>'org.apache.http.cookie.CookieSpec e' in class 'org.apache.http.impl.cookie.DefaultCookieSpecProvider'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] effects'=>'java.lang.String[] a' in class 'me.MiniDigger.CraftCore.Command.Commands.EffectsCommands'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String author'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String version'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.FileUtil fileUtil'=>'me.MiniDigger.Core.Util.FileUtil I' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Bar.BarHandler barHandler'=>'me.MiniDigger.Core.Bar.BarHandler w' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.EntityUtil entityUtil'=>'me.MiniDigger.Core.Util.EntityUtil H' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Main instance'=>'me.MiniDigger.Core.Main d' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.TimeUtil timeUtil'=>'me.MiniDigger.Core.Util.TimeUtil M' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.ZipUtil zipUtil'=>'me.MiniDigger.Core.Util.ZipUtil N' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Map.MapHandler mapHandler'=>'me.MiniDigger.Core.Map.MapHandler j' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.BaseUtil baseUtil'=>'me.MiniDigger.Core.Util.BaseUtil P' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.RandomUtil randomUtil'=>'me.MiniDigger.Core.Util.RandomUtil J' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.ItemUtil itemUtil'=>'me.MiniDigger.Core.Util.ItemUtil Q' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.StringUtil stringUtil'=>'me.MiniDigger.Core.Util.StringUtil L' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.SQL.SQLHandler sqlHandler'=>'me.MiniDigger.Core.SQL.SQLHandler r' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Kit.KitHandler kitHandler'=>'me.MiniDigger.Core.Kit.KitHandler B' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Util.DeZipUtil deZipUtil'=>'me.MiniDigger.Core.Util.DeZipUtil G' in class 'me.MiniDigger.CraftCore.CoreCore'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.io.SessionOutputBuffer out'=>'org.apache.http.io.SessionOutputBuffer a' in class 'org.apache.http.impl.io.IdentityOutputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean b' in class 'org.apache.http.impl.io.IdentityOutputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int flags'=>'int f' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type2Message'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] challenge'=>'byte[] c' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type2Message'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] targetInfo'=>'byte[] e' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type2Message'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String target'=>'java.lang.String d' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type2Message'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.DefaultConnectionReuseStrategy INSTANCE'=>'org.apache.http.impl.DefaultConnectionReuseStrategy a' in class 'org.apache.http.impl.DefaultConnectionReuseStrategy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.client.entity.InputStreamFactory GZIP'=>'org.apache.http.client.entity.InputStreamFactory a' in class 'org.apache.http.client.protocol.ResponseContentEncoding'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.client.entity.InputStreamFactory DEFLATE'=>'org.apache.http.client.entity.InputStreamFactory b' in class 'org.apache.http.client.protocol.ResponseContentEncoding'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int port'=>'int h' in class 'org.apache.http.auth.AuthScope'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String ANY_HOST'=>'java.lang.String a' in class 'org.apache.http.auth.AuthScope'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String ANY_REALM'=>'java.lang.String b' in class 'org.apache.http.auth.AuthScope'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String scheme'=>'java.lang.String e' in class 'org.apache.http.auth.AuthScope'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String host'=>'java.lang.String g' in class 'org.apache.http.auth.AuthScope'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.auth.AuthScope ANY'=>'org.apache.http.auth.AuthScope d' in class 'org.apache.http.auth.AuthScope'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String realm'=>'java.lang.String f' in class 'org.apache.http.auth.AuthScope'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost origin'=>'org.apache.http.HttpHost i' in class 'org.apache.http.auth.AuthScope'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String ANY_SCHEME'=>'java.lang.String c' in class 'org.apache.http.auth.AuthScope'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean DEBUG'=>'boolean b' in class 'org.java_websocket.WebSocketImpl'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.drafts.Draft draft'=>'org.java_websocket.drafts.Draft m' in class 'org.java_websocket.WebSocketImpl'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.channels.SelectionKey key'=>'java.nio.channels.SelectionKey d' in class 'org.java_websocket.WebSocketImpl'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Integer closecode'=>'java.lang.Integer s' in class 'org.java_websocket.WebSocketImpl'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocketListener wsl'=>'org.java_websocket.WebSocketListener k' in class 'org.java_websocket.WebSocketImpl'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int RCVBUF'=>'int a' in class 'org.java_websocket.WebSocketImpl'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocket$READYSTATE readystate'=>'org.java_websocket.WebSocket$READYSTATE j' in class 'org.java_websocket.WebSocketImpl'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocket$Role role'=>'org.java_websocket.WebSocket$Role n' in class 'org.java_websocket.WebSocketImpl'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.BlockingQueue inQueue'=>'java.util.concurrent.BlockingQueue g' in class 'org.java_websocket.WebSocketImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.channels.ByteChannel channel'=>'java.nio.channels.ByteChannel e' in class 'org.java_websocket.WebSocketImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.BlockingQueue outQueue'=>'java.util.concurrent.BlockingQueue f' in class 'org.java_websocket.WebSocketImpl'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map parameters'=>'java.util.Map a' in class 'org.apache.http.params.BasicHttpParams'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List users'=>'java.util.List a' in class 'me.MiniDigger.CraftCore.User.CoreUserHandler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User bot'=>'me.MiniDigger.Core.User.User b' in class 'me.MiniDigger.CraftCore.User.CoreUserHandler'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost target'=>'org.apache.http.HttpHost e' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String f' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.ProtocolVersion version'=>'org.apache.http.ProtocolVersion g' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpRequest original'=>'org.apache.http.HttpRequest d' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.URI uri'=>'java.net.URI h' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.sql.Connection conn'=>'java.sql.Connection c' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLQuery'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String stmt'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLQuery'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.SQL.SQLHandler handler'=>'me.MiniDigger.Core.SQL.SQLHandler b' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLQuery'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log g' in class 'org.apache.http.impl.conn.DefaultHttpResponseParser'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.util.CharArrayBuffer lineBuf'=>'org.apache.http.util.CharArrayBuffer i' in class 'org.apache.http.impl.conn.DefaultHttpResponseParser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.cookie.RFC2965Spec strict'=>'org.apache.http.impl.cookie.RFC2965Spec a' in class 'org.apache.http.impl.cookie.DefaultCookieSpec'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean listener'=>'boolean b' in class 'me.MiniDigger.CraftCore.Item.CoreItemBuilder'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.plugin.Plugin plugin'=>'org.bukkit.plugin.Plugin a' in class 'me.MiniDigger.CraftCore.Item.CoreItemBuilder'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap effects'=>'java.util.HashMap c' in class 'me.MiniDigger.CraftCore.Item.CoreItemBuilder'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.AddOn.AddOnBean bean'=>'me.MiniDigger.Core.AddOn.AddOnBean e' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.configuration.file.FileConfiguration config'=>'org.bukkit.configuration.file.FileConfiguration c' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.File dataFolder'=>'java.io.File b' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.io.File configFile'=>'java.io.File d' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Core core'=>'me.MiniDigger.Core.Core a' in class 'me.MiniDigger.Core.Core'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int i'=>'int b' in class 'me.MiniDigger.Core.Core'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long total'=>'long c' in class 'org.apache.http.impl.io.ContentLengthOutputStream'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.io.SessionOutputBuffer out'=>'org.apache.http.io.SessionOutputBuffer a' in class 'org.apache.http.impl.io.ContentLengthOutputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean d' in class 'org.apache.http.impl.io.ContentLengthOutputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost proxy'=>'org.apache.http.HttpHost c' in class 'org.apache.http.impl.conn.DefaultProxyRoutePlanner'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] hostBytes'=>'byte[] c' in class 'org.apache.http.impl.auth.NTLMEngineImpl$Type1Message'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.Wire wire'=>'org.apache.http.impl.conn.Wire p' in class 'org.apache.http.impl.conn.LoggingManagedHttpClientConnection'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log n' in class 'org.apache.http.impl.conn.LoggingManagedHttpClientConnection'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log headerlog'=>'org.apache.commons.logging.Log o' in class 'org.apache.http.impl.conn.LoggingManagedHttpClientConnection'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map exceptions'=>'java.util.Map b' in class 'org.apache.http.conn.util.PublicSuffixMatcher'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map rules'=>'java.util.Map a' in class 'org.apache.http.conn.util.PublicSuffixMatcher'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'mkremins.fanciful.FancyMessage val$msg'=>'mkremins.fanciful.FancyMessage b' in class 'me.MiniDigger.CraftCore.User.CoreUser$1'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.User.CoreUser this$0'=>'me.MiniDigger.CraftCore.User.CoreUser a' in class 'me.MiniDigger.CraftCore.User.CoreUser$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String i' in class 'org.apache.http.client.methods.RequestBuilder$InternalRequest'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String pass'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String user'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String host'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String db'=>'java.lang.String e' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String url'=>'java.lang.String f' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String port'=>'java.lang.String d' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.scheduler.BukkitTask timer'=>'org.bukkit.scheduler.BukkitTask f' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'float sub'=>'float g' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'float subbed'=>'float h' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int secs'=>'int e' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.LineParser lineParser'=>'org.apache.http.message.LineParser d' in class 'org.apache.http.impl.io.AbstractMessageParser'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpMessage message'=>'org.apache.http.HttpMessage f' in class 'org.apache.http.impl.io.AbstractMessageParser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int state'=>'int e' in class 'org.apache.http.impl.io.AbstractMessageParser'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.cookie.DefaultCookieSpecProvider this$0'=>'org.apache.http.impl.cookie.DefaultCookieSpecProvider a' in class 'org.apache.http.impl.cookie.DefaultCookieSpecProvider$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String world'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedWeatherFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.WeatherType weather'=>'org.bukkit.WeatherType d' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedWeatherFeature'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Date val$d1'=>'java.util.Date a' in class 'me.MiniDigger.CraftCore.Command.Commands.DevCommands$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$9'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.framing.Framedata$Opcode[] $VALUES'=>'org.java_websocket.framing.Framedata$Opcode[] a' in class 'org.java_websocket.framing.Framedata$Opcode'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] cache'=>'byte[] b' in class 'org.apache.http.impl.io.ChunkedOutputStream'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.io.SessionOutputBuffer out'=>'org.apache.http.io.SessionOutputBuffer a' in class 'org.apache.http.impl.io.ChunkedOutputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean e' in class 'org.apache.http.impl.io.ChunkedOutputStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map attributes'=>'java.util.Map l' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean shutdown'=>'boolean m' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String id'=>'java.lang.String k' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean closed'=>'boolean a' in class 'org.apache.http.client.entity.DeflateInputStream$DeflateStream'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.TokenParser INSTANCE'=>'org.apache.http.message.TokenParser a' in class 'org.apache.http.message.TokenParser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.execchain.ServiceUnavailableRetryExec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long time'=>'long c' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.scheduler.BukkitTask task'=>'org.bukkit.scheduler.BukkitTask e' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String world'=>'java.lang.String d' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$8'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.drafts.Draft$HandshakeState[] $VALUES'=>'org.java_websocket.drafts.Draft$HandshakeState[] a' in class 'org.java_websocket.drafts.Draft$HandshakeState'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.io.OutputStream out'=>'java.io.OutputStream a' in class 'org.apache.http.impl.conn.LoggingOutputStream'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.Wire wire'=>'org.apache.http.impl.conn.Wire b' in class 'org.apache.http.impl.conn.LoggingOutputStream'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent this$1'=>'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent a' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'short httpstatus'=>'short d' in class 'org.java_websocket.handshake.HandshakeImpl1Server'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.atomic.AtomicBoolean isclosed'=>'java.util.concurrent.atomic.AtomicBoolean i' in class 'org.java_websocket.server.WebSocketServer'. Given that the prefix 'is' is common, only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.nio.channels.Selector selector'=>'java.nio.channels.Selector f' in class 'org.java_websocket.server.WebSocketServer'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int DECODERS'=>'int b' in class 'org.java_websocket.server.WebSocketServer'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List iqueue'=>'java.util.List k' in class 'org.java_websocket.server.WebSocketServer'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.InetSocketAddress address'=>'java.net.InetSocketAddress d' in class 'org.java_websocket.server.WebSocketServer'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.server.WebSocketServer$WebSocketServerFactory wsf'=>'org.java_websocket.server.WebSocketServer$WebSocketServerFactory o' in class 'org.java_websocket.server.WebSocketServer'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.channels.ServerSocketChannel server'=>'java.nio.channels.ServerSocketChannel e' in class 'org.java_websocket.server.WebSocketServer'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.atomic.AtomicInteger queuesize'=>'java.util.concurrent.atomic.AtomicInteger n' in class 'org.java_websocket.server.WebSocketServer'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List decoders'=>'java.util.List j' in class 'org.java_websocket.server.WebSocketServer'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.BlockingQueue buffers'=>'java.util.concurrent.BlockingQueue l' in class 'org.java_websocket.server.WebSocketServer'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List drafts'=>'java.util.List g' in class 'org.java_websocket.server.WebSocketServer'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int lowerBound'=>'int a' in class 'org.apache.http.message.ParserCursor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int pos'=>'int c' in class 'org.apache.http.message.ParserCursor'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int upperBound'=>'int b' in class 'org.apache.http.message.ParserCursor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.execchain.RetryExec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent this$1'=>'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent a' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String j' in class 'org.apache.http.client.methods.RequestBuilder$InternalEntityEclosingRequest'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean consumed'=>'boolean b' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpEntity original'=>'org.apache.http.HttpEntity a' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int[] ports'=>'int[] k' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String commentURL'=>'java.lang.String j' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean discard'=>'boolean l' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.message.LineParser lineParser'=>'org.apache.http.message.LineParser b' in class 'org.apache.http.impl.conn.DefaultHttpResponseParserFactory'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.DefaultHttpResponseParserFactory INSTANCE'=>'org.apache.http.impl.conn.DefaultHttpResponseParserFactory a' in class 'org.apache.http.impl.conn.DefaultHttpResponseParserFactory'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] dataBuffer'=>'byte[] f' in class 'org.apache.http.impl.auth.NTLMEngineImpl$MD4'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long count'=>'long e' in class 'org.apache.http.impl.auth.NTLMEngineImpl$MD4'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int D'=>'int d' in class 'org.apache.http.impl.auth.NTLMEngineImpl$MD4'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int B'=>'int b' in class 'org.apache.http.impl.auth.NTLMEngineImpl$MD4'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int C'=>'int c' in class 'org.apache.http.impl.auth.NTLMEngineImpl$MD4'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int A'=>'int a' in class 'org.apache.http.impl.auth.NTLMEngineImpl$MD4'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List exceptions'=>'java.util.List b' in class 'org.apache.http.conn.util.PublicSuffixList'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List rules'=>'java.util.List a' in class 'org.apache.http.conn.util.PublicSuffixList'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.client.protocol.RequestClientConnControl'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Long playTime'=>'java.lang.Long k' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.UUID uuid'=>'java.util.UUID a' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Date muteTime'=>'java.util.Date f' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Date banTime'=>'java.util.Date h' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String suffix'=>'java.lang.String d' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean muted'=>'boolean e' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String prefix'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Date firstSeen'=>'java.util.Date i' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean banned'=>'boolean g' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int retrys'=>'int n' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Date lastSeen'=>'java.util.Date j' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.block.BlockState val$block'=>'org.bukkit.block.BlockState a' in class 'me.MiniDigger.CraftCore.Regen.CoreRegen$2'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Game.Game game'=>'me.MiniDigger.Core.Game.Game a' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List features'=>'java.util.List c' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Phase.Phase next'=>'me.MiniDigger.Core.Phase.Phase b' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Holo.CoreHoloHandler this$0'=>'me.MiniDigger.CraftCore.Holo.CoreHoloHandler a' in class 'me.MiniDigger.CraftCore.Holo.CoreHoloHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$7'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.drafts.Draft$CloseHandshakeType[] $VALUES'=>'org.java_websocket.drafts.Draft$CloseHandshakeType[] a' in class 'org.java_websocket.drafts.Draft$CloseHandshakeType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String value'=>'java.lang.String c' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean isSecure'=>'boolean h' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'is' is common, only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map attribs'=>'java.util.Map b' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String cookiePath'=>'java.lang.String g' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.conn.DefaultHttpClientConnectionOperator'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] ipad'=>'byte[] a' in class 'org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.security.MessageDigest md5'=>'java.security.MessageDigest c' in class 'org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] opad'=>'byte[] b' in class 'org.apache.http.impl.auth.NTLMEngineImpl$HMACMD5'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.io.SessionInputBufferImpl inbuffer'=>'org.apache.http.impl.io.SessionInputBufferImpl a' in class 'org.apache.http.impl.BHttpConnectionBase'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.io.SessionOutputBufferImpl outbuffer'=>'org.apache.http.impl.io.SessionOutputBufferImpl b' in class 'org.apache.http.impl.BHttpConnectionBase'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.client.protocol.RequestAuthCache'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.auth.Credentials creds'=>'org.apache.http.auth.Credentials b' in class 'org.apache.http.auth.AuthOption'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.auth.AuthScheme authScheme'=>'org.apache.http.auth.AuthScheme a' in class 'org.apache.http.auth.AuthOption'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Update.CoreUpdateHandler this$0'=>'me.MiniDigger.CraftCore.Update.CoreUpdateHandler a' in class 'me.MiniDigger.CraftCore.Update.CoreUpdateHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.block.BlockState val$state'=>'org.bukkit.block.BlockState a' in class 'me.MiniDigger.CraftCore.Regen.CoreRegen$1'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap packets'=>'java.util.HashMap a' in class 'me.MiniDigger.CraftCore.Packet.CorePacketHandler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap addOns'=>'java.util.HashMap a' in class 'me.MiniDigger.CraftCore.Command.Commands.AddOnCommands'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$6'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocket$Role[] $VALUES'=>'org.java_websocket.WebSocket$Role[] a' in class 'org.java_websocket.WebSocket$Role'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.conn.CPoolEntry poolEntry'=>'org.apache.http.impl.conn.CPoolEntry a' in class 'org.apache.http.impl.conn.CPoolProxy'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] lmResponse'=>'byte[] l' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] ntlmHash'=>'byte[] m' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] ntlmv2Blob'=>'byte[] r' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] ntlmv2Hash'=>'byte[] o' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String target'=>'java.lang.String e' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] lmv2Hash'=>'byte[] p' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String user'=>'java.lang.String b' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String password'=>'java.lang.String c' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] challenge'=>'byte[] d' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] lmHash'=>'byte[] k' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String domain'=>'java.lang.String a' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] timestamp'=>'byte[] j' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.execchain.ConnectionHolder connHolder'=>'org.apache.http.impl.execchain.ConnectionHolder b' in class 'org.apache.http.impl.execchain.ResponseEntityProxy'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.User.User val$user'=>'me.MiniDigger.Core.User.User a' in class 'me.MiniDigger.CraftCore.Util.CoreCommonMethods$2'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.client.protocol.RequestAddCookies'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List all'=>'java.util.List b' in class 'org.apache.http.impl.client.RedirectLocations'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Set unique'=>'java.util.Set a' in class 'org.apache.http.impl.client.RedirectLocations'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.TreeMap map'=>'java.util.TreeMap b' in class 'org.java_websocket.handshake.HandshakedataImpl1'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] content'=>'byte[] a' in class 'org.java_websocket.handshake.HandshakedataImpl1'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocketImpl conn'=>'org.java_websocket.WebSocketImpl c' in class 'org.java_websocket.client.WebSocketClient'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.channels.SocketChannel channel'=>'java.nio.channels.SocketChannel d' in class 'org.java_websocket.client.WebSocketClient'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int timeout'=>'int l' in class 'org.java_websocket.client.WebSocketClient'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Thread readthread'=>'java.lang.Thread g' in class 'org.java_websocket.client.WebSocketClient'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.drafts.Draft draft'=>'org.java_websocket.drafts.Draft h' in class 'org.java_websocket.client.WebSocketClient'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.java_websocket.client.WebSocketClient$WebSocketClientFactory wsfactory'=>'org.java_websocket.client.WebSocketClient$WebSocketClientFactory m' in class 'org.java_websocket.client.WebSocketClient'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map headers'=>'java.util.Map i' in class 'org.java_websocket.client.WebSocketClient'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.URI uri'=>'java.net.URI b' in class 'org.java_websocket.client.WebSocketClient'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.concurrent.CountDownLatch closeLatch'=>'java.util.concurrent.CountDownLatch k' in class 'org.java_websocket.client.WebSocketClient'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.protocol.HttpContext context'=>'org.apache.http.protocol.HttpContext a' in class 'org.apache.http.protocol.HttpCoreContext'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Update.UpdateType type'=>'me.MiniDigger.Core.Update.UpdateType a' in class 'me.MiniDigger.CraftCore.Update.CoreUpdateHandler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Server.Server server'=>'me.MiniDigger.Core.Server.Server b' in class 'me.MiniDigger.CraftCore.Packet.Packets.ServerPacket'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.execchain.RedirectExec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.ArrayList games'=>'java.util.ArrayList c' in class 'me.MiniDigger.CraftCore.Game.CoreGameHandler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Game.Game mainGame'=>'me.MiniDigger.Core.Game.Game b' in class 'me.MiniDigger.CraftCore.Game.CoreGameHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location[] normal'=>'org.bukkit.Location[] c' in class 'me.MiniDigger.CraftCore.Feature.Features.DropFeature'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location[] special'=>'org.bukkit.Location[] d' in class 'me.MiniDigger.CraftCore.Feature.Features.DropFeature'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$5'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.java_websocket.WebSocket$READYSTATE[] $VALUES'=>'org.java_websocket.WebSocket$READYSTATE[] a' in class 'org.java_websocket.WebSocket$READYSTATE'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean oneHeader'=>'boolean e' in class 'org.apache.http.impl.cookie.RFC2109Spec'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.BasicCredentialsProvider internal'=>'org.apache.http.impl.client.BasicCredentialsProvider b' in class 'org.apache.http.impl.client.SystemDefaultCredentialsProvider'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map SCHEME_MAP'=>'java.util.Map a' in class 'org.apache.http.impl.client.SystemDefaultCredentialsProvider'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'byte[] SIGNATURE'=>'byte[] d' in class 'org.apache.http.impl.auth.NTLMEngineImpl'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.security.SecureRandom RND_GEN'=>'java.security.SecureRandom b' in class 'org.apache.http.impl.auth.NTLMEngineImpl'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte[] buffer'=>'byte[] b' in class 'org.apache.http.entity.BufferedHttpEntity'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard this$0'=>'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard a' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int sndBufSize'=>'int f' in class 'org.apache.http.config.SocketConfig$Builder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int soTimeout'=>'int a' in class 'org.apache.http.config.SocketConfig$Builder'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int rcvBufSize'=>'int g' in class 'org.apache.http.config.SocketConfig$Builder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int soLinger'=>'int c' in class 'org.apache.http.config.SocketConfig$Builder'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean tcpNoDelay'=>'boolean e' in class 'org.apache.http.config.SocketConfig$Builder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String message'=>'java.lang.String a' in class 'org.apache.http.MessageConstraintException'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int major'=>'int b' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int commit'=>'int d' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int minor'=>'int c' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String raw'=>'java.lang.String a' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int build'=>'int e' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpEntity entity'=>'org.apache.http.HttpEntity i' in class 'org.apache.http.client.methods.HttpEntityEnclosingRequestBase'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String message'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Packet.Packets.LogRecordPacket'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.execchain.ProtocolExec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List users'=>'java.util.List b' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Phase.Phase phase'=>'me.MiniDigger.Core.Phase.Phase e' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean allowJoin'=>'boolean g' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.UUID id'=>'java.util.UUID a' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.HashMap gameData'=>'java.util.HashMap d' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List specs'=>'java.util.List c' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.Core.Game.GameType type'=>'me.MiniDigger.Core.Game.GameType f' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$4'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.cookie.DefaultCookieSpecProvider$CompatibilityLevel[] $VALUES'=>'org.apache.http.impl.cookie.DefaultCookieSpecProvider$CompatibilityLevel[] a' in class 'org.apache.http.impl.cookie.DefaultCookieSpecProvider$CompatibilityLevel'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.client.NoopUserTokenHandler INSTANCE'=>'org.apache.http.impl.client.NoopUserTokenHandler a' in class 'org.apache.http.impl.client.NoopUserTokenHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.io.InputStream content'=>'java.io.InputStream c' in class 'org.apache.http.client.entity.DecompressingEntity'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.REST.CoreDashingHandler this$0'=>'me.MiniDigger.CraftCore.REST.CoreDashingHandler a' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.config.SocketConfig DEFAULT'=>'org.apache.http.config.SocketConfig a' in class 'org.apache.http.config.SocketConfig'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int sndBufSize'=>'int g' in class 'org.apache.http.config.SocketConfig'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int soTimeout'=>'int b' in class 'org.apache.http.config.SocketConfig'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int rcvBufSize'=>'int h' in class 'org.apache.http.config.SocketConfig'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int soLinger'=>'int d' in class 'org.apache.http.config.SocketConfig'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean tcpNoDelay'=>'boolean f' in class 'org.apache.http.config.SocketConfig'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map classes'=>'java.util.Map a' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnClassLoader'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.AddOn.CoreAddOn plugin'=>'me.MiniDigger.CraftCore.AddOn.CoreAddOn b' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnClassLoader'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.ProtocolVersion version'=>'org.apache.http.ProtocolVersion f' in class 'org.apache.http.client.methods.HttpRequestBase'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.URI uri'=>'java.net.URI g' in class 'org.apache.http.client.methods.HttpRequestBase'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.client.config.RequestConfig config'=>'org.apache.http.client.config.RequestConfig h' in class 'org.apache.http.client.methods.HttpRequestBase'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String pass'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String clientName'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.impl.execchain.MainClientExec'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Feature.Features.LastManStandingFeature this$0'=>'me.MiniDigger.CraftCore.Feature.Features.LastManStandingFeature a' in class 'me.MiniDigger.CraftCore.Feature.Features.LastManStandingFeature$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean restore'=>'boolean d' in class 'me.MiniDigger.CraftCore.Feature.Features.ClearInvFeature'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.HashMap invs'=>'java.util.HashMap c' in class 'me.MiniDigger.CraftCore.Feature.Features.ClearInvFeature'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$3'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.impl.auth.NTLMScheme$State[] $VALUES'=>'org.apache.http.impl.auth.NTLMScheme$State[] a' in class 'org.apache.http.impl.auth.NTLMScheme$State'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean stripPort'=>'boolean a' in class 'org.apache.http.impl.auth.KerberosSchemeFactory'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.commons.logging.Log log'=>'org.apache.commons.logging.Log a' in class 'org.apache.http.conn.ssl.DefaultHostnameVerifier'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.REST.CoreDashingHandler this$0'=>'me.MiniDigger.CraftCore.REST.CoreDashingHandler a' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map items'=>'java.util.Map a' in class 'org.apache.http.config.RegistryBuilder'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpHost host'=>'org.apache.http.HttpHost a' in class 'org.apache.http.conn.HttpHostConnectException'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset charset'=>'java.nio.charset.Charset b' in class 'org.apache.http.client.methods.RequestBuilder'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.HttpEntity entity'=>'org.apache.http.HttpEntity f' in class 'org.apache.http.client.methods.RequestBuilder'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String method'=>'java.lang.String a' in class 'org.apache.http.client.methods.RequestBuilder'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.List parameters'=>'java.util.List g' in class 'org.apache.http.client.methods.RequestBuilder'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.ProtocolVersion version'=>'org.apache.http.ProtocolVersion c' in class 'org.apache.http.client.methods.RequestBuilder'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.net.URI uri'=>'java.net.URI d' in class 'org.apache.http.client.methods.RequestBuilder'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.apache.http.client.config.RequestConfig config'=>'org.apache.http.client.config.RequestConfig h' in class 'org.apache.http.client.methods.RequestBuilder'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset ISO_8859_1'=>'java.nio.charset.Charset c' in class 'org.apache.http.Consts'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset UTF_8'=>'java.nio.charset.Charset a' in class 'org.apache.http.Consts'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.nio.charset.Charset ASCII'=>'java.nio.charset.Charset b' in class 'org.apache.http.Consts'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.LinkedList list'=>'java.util.LinkedList a' in class 'org.apache.http.protocol.ChainBuilder'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil this$0'=>'me.MiniDigger.CraftCore.Util.CoreShutdownUtil a' in class 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.List headers'=>'java.util.List a' in class 'org.apache.http.message.HeaderGroup'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.concurrent.atomic.AtomicBoolean aborted'=>'java.util.concurrent.atomic.AtomicBoolean d' in class 'org.apache.http.client.methods.AbstractExecutionAwareRequest'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.REST.CoreDashingHandler this$0'=>'me.MiniDigger.CraftCore.REST.CoreDashingHandler a' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler$3'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.impl.execchain.ConnectionHolder connHolder'=>'org.apache.http.impl.execchain.ConnectionHolder b' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.apache.http.HttpResponse original'=>'org.apache.http.HttpResponse a' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String cmd'=>'java.lang.String c' in class 'me.MiniDigger.CraftCore.Packet.Packets.CommandPacket'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String toServer'=>'java.lang.String b' in class 'me.MiniDigger.CraftCore.Packet.Packets.CommandPacket'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature this$0'=>'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature a' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature$1'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.World val$w'=>'org.bukkit.World b' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature$1'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Material[] allowed'=>'org.bukkit.Material[] c' in class 'me.MiniDigger.CraftCore.Feature.Features.BuildFeature'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.ArrayList channels'=>'java.util.ArrayList a' in class 'me.MiniDigger.CraftCore.Chat.CoreChatHandler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers this$0'=>'me.MiniDigger.CraftCore.Protocol.CoreSignChangers e' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$2'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object current'=>'java.lang.Object b' in class 'com.minnymin.zephyrus.core.util.map.MultiMapIterator'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'com.minnymin.zephyrus.core.util.map.MultiMap map'=>'com.minnymin.zephyrus.core.util.map.MultiMap a' in class 'com.minnymin.zephyrus.core.util.map.MultiMapIterator'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int lastIndex'=>'int d' in class 'com.minnymin.zephyrus.core.util.map.MultiMapIterator'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int index'=>'int c' in class 'com.minnymin.zephyrus.core.util.map.MultiMapIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getChannel(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.CoreChatHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$2'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'next()'=>'a()' in class 'com.minnymin.zephyrus.core.util.map.MultiMapIterator'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.CookieSpecBase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.CookieSpecBase'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMimeType()'=>'a()' in class 'org.apache.http.entity.ContentType'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.lang.String, java.nio.charset.Charset)'=>'a(java.lang.String, java.nio.charset.Charset)' in class 'org.apache.http.entity.ContentType'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCharset()'=>'b()' in class 'org.apache.http.entity.ContentType'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.entity.ContentType'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.lang.String[], java.lang.String[])'=>'a(java.lang.String, java.lang.String[], java.lang.String[])' in class 'org.apache.http.conn.ssl.StrictHostnameVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'lookup(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.config.Registry'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isAborted()'=>'b()' in class 'org.apache.http.client.methods.HttpUriRequest'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getURI()'=>'a()' in class 'org.apache.http.client.methods.HttpUriRequest'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'nextToken()'=>'a()' in class 'org.apache.http.TokenIterator'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.ConnectionReuseStrategy'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.protocol.BasicHttpContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAttribute(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.protocol.BasicHttpContext'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBuffer()'=>'a()' in class 'org.apache.http.message.BufferedHeader'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getElements()'=>'c()' in class 'org.apache.http.message.BufferedHeader'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getValuePos()'=>'b()' in class 'org.apache.http.message.BufferedHeader'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.message.BufferedHeader'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.message.BufferedHeader'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setGame(me.MiniDigger.Core.Game.Game)'=>'a(me.MiniDigger.Core.Game.Game)' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setColor(org.bukkit.ChatColor)'=>'a(org.bukkit.ChatColor)' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'leave(java.util.UUID)'=>'b(java.util.UUID)' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'join(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayers()'=>'b()' in class 'me.MiniDigger.CraftCore.Team.CoreTeam'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getParams()'=>'d()' in class 'org.apache.http.message.AbstractHttpMessage'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHeaders(java.lang.String)'=>'b(java.lang.String)' in class 'org.apache.http.message.AbstractHttpMessage'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeaders(org.apache.http.Header[])'=>'a(org.apache.http.Header[])' in class 'org.apache.http.message.AbstractHttpMessage'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(org.apache.http.Header)'=>'a(org.apache.http.Header)' in class 'org.apache.http.message.AbstractHttpMessage'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.apache.http.message.AbstractHttpMessage'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeader(java.lang.String, java.lang.String)'=>'b(java.lang.String, java.lang.String)' in class 'org.apache.http.message.AbstractHttpMessage'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAllHeaders()'=>'b()' in class 'org.apache.http.message.AbstractHttpMessage'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'go(java.lang.String, org.json.simple.JSONObject)'=>'a(java.lang.String, org.json.simple.JSONObject)' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 2 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'mostWords()'=>'b()' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'say(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'cancel()'=>'a()' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isReleased()'=>'g()' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setValidFor(long, java.util.concurrent.TimeUnit)'=>'a(long, java.util.concurrent.TimeUnit)' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setState(java.lang.Object)'=>'a(java.lang.Object)' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isReusable()'=>'b()' in class 'org.apache.http.impl.execchain.ConnectionHolder'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle(org.java_websocket.WebSocket)'=>'a(org.java_websocket.WebSocket)' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle()'=>'a()' in class 'me.MiniDigger.CraftCore.Packet.Packets.ChatPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.BleedFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.BleedFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.BleedFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.Channels.TeamChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Team.Team'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setGame(me.MiniDigger.Core.Game.Game)'=>'a(me.MiniDigger.Core.Game.Game)' in class 'me.MiniDigger.Core.Team.Team'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setColor(org.bukkit.ChatColor)'=>'a(org.bukkit.ChatColor)' in class 'me.MiniDigger.Core.Team.Team'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'leave(java.util.UUID)'=>'b(java.util.UUID)' in class 'me.MiniDigger.Core.Team.Team'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.Team.Team'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'join(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.Core.Team.Team'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayers()'=>'b()' in class 'me.MiniDigger.Core.Team.Team'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$11'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKey(int)'=>'c(int)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntry(java.lang.Object)'=>'f(java.lang.Object)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'keySet()'=>'a()' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getIndex(java.lang.Object)'=>'b(java.lang.Object)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'remove(int)'=>'b(int)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFirstValue(java.lang.Object)'=>'d(java.lang.Object)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'valueSet()'=>'b()' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'remove(java.lang.Object)'=>'a(java.lang.Object)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clone()'=>'d()' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'put(java.lang.Object, java.lang.Object, java.lang.Object)'=>'a(java.lang.Object, java.lang.Object, java.lang.Object)' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'size()'=>'c()' in class 'com.minnymin.zephyrus.core.util.map.MultiMap'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create()'=>'a()' in class 'org.apache.http.impl.client.HttpClientBuilder'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'b()' in class 'org.apache.http.impl.client.HttpClientBuilder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.lang.String[], java.lang.String[])'=>'a(java.lang.String, java.lang.String[], java.lang.String[])' in class 'org.apache.http.conn.ssl.BrowserCompatHostnameVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.config.MessageConstraints$Builder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMessage()'=>'b()' in class 'org.java_websocket.framing.CloseFrameBuilder'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCloseCode()'=>'a()' in class 'org.java_websocket.framing.CloseFrameBuilder'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPayload(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.framing.CloseFrameBuilder'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatusCode()'=>'b()' in class 'org.apache.http.StatusLine'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'newString(byte[], java.lang.String)'=>'a(byte[], java.lang.String)' in class 'org.apache.commons.codec.binary.StringUtils'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'doShutdown()'=>'a()' in class 'me.MiniDigger.CraftCore.Util.CoreShutdownUtil'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'nextToken()'=>'a()' in class 'org.apache.http.message.BasicTokenIterator'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'loadAll()'=>'a()' in class 'me.MiniDigger.CraftCore.Stats.CoreStatsHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.CraftCore.Stats.CoreStatsHandler'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getTop(me.MiniDigger.Core.Stats.StatsType, int)'=>'a(me.MiniDigger.Core.Stats.StatsType, int)' in class 'me.MiniDigger.CraftCore.Stats.CoreStatsHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'update()'=>'a()' in class 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'b()' in class 'me.MiniDigger.CraftCore.Protocol.CoreSkullChangers'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeLine(org.apache.http.util.CharArrayBuffer)'=>'a(org.apache.http.util.CharArrayBuffer)' in class 'org.apache.http.io.SessionOutputBuffer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(int)'=>'b(int)' in class 'org.apache.http.io.SessionOutputBuffer'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeLine(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.io.SessionOutputBuffer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.io.SessionOutputBuffer'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'flush()'=>'a()' in class 'org.apache.http.io.SessionOutputBuffer'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.ClientExecChain'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getWinner()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.VoteFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.AutoRespawnFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.AutoRespawnFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.AutoRespawnFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$10'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getChannel(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Chat.ChatHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2109VersionHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2109VersionHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserToken(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.DefaultUserTokenHandler'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.lang.String[], java.lang.String[])'=>'a(java.lang.String, java.lang.String[], java.lang.String[])' in class 'org.apache.http.conn.ssl.AllowAllHostnameVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'put(org.java_websocket.WebSocketImpl)'=>'a(org.java_websocket.WebSocketImpl)' in class 'org.java_websocket.server.WebSocketServer$WebSocketWorker'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isAborted()'=>'b()' in class 'org.apache.http.client.methods.HttpExecutionAware'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getOpcode()'=>'c()' in class 'org.java_websocket.framing.FramedataImpl1'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setOptcode(org.java_websocket.framing.Framedata$Opcode)'=>'a(org.java_websocket.framing.Framedata$Opcode)' in class 'org.java_websocket.framing.FramedataImpl1'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isFin()'=>'a()' in class 'org.java_websocket.framing.FramedataImpl1'. Given that the prefix 'is' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setFin(boolean)'=>'c(boolean)' in class 'org.java_websocket.framing.FramedataImpl1'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPayload(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.framing.FramedataImpl1'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.RequestLine'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUri()'=>'c()' in class 'org.apache.http.RequestLine'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isBlocking()'=>'d()' in class 'org.java_websocket.AbstractWrappedByteChannel'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'readMore(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.AbstractWrappedByteChannel'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isNeedWrite()'=>'a()' in class 'org.java_websocket.AbstractWrappedByteChannel'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isNeedRead()'=>'c()' in class 'org.java_websocket.AbstractWrappedByteChannel'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeMore()'=>'b()' in class 'org.java_websocket.AbstractWrappedByteChannel'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'add(java.lang.Object)'=>'c(java.lang.Object)' in class 'org.apache.http.pool.RouteSpecificPool'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'unqueue(org.apache.http.pool.PoolEntryFuture)'=>'b(org.apache.http.pool.PoolEntryFuture)' in class 'org.apache.http.pool.RouteSpecificPool'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'g()' in class 'org.apache.http.pool.RouteSpecificPool'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'queue(org.apache.http.pool.PoolEntryFuture)'=>'a(org.apache.http.pool.PoolEntryFuture)' in class 'org.apache.http.pool.RouteSpecificPool'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getFree(java.lang.Object)'=>'b(java.lang.Object)' in class 'org.apache.http.pool.RouteSpecificPool'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'free(org.apache.http.pool.PoolEntry, boolean)'=>'a(org.apache.http.pool.PoolEntry, boolean)' in class 'org.apache.http.pool.RouteSpecificPool'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'remove(org.apache.http.pool.PoolEntry)'=>'a(org.apache.http.pool.PoolEntry)' in class 'org.apache.http.pool.RouteSpecificPool'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getLastUsed()'=>'e()' in class 'org.apache.http.pool.RouteSpecificPool'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getField(java.lang.Class, java.lang.String)'=>'a(java.lang.Class, java.lang.String)' in class 'me.MiniDigger.CraftCore.Util.CoreReflectionUtil'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHandle(org.bukkit.entity.Entity)'=>'a(org.bukkit.entity.Entity)' in class 'me.MiniDigger.CraftCore.Util.CoreReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCraftClass(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Util.CoreReflectionUtil'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHandle(org.bukkit.World)'=>'a(org.bukkit.World)' in class 'me.MiniDigger.CraftCore.Util.CoreReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod(java.lang.Class, java.lang.String)'=>'b(java.lang.Class, java.lang.String)' in class 'me.MiniDigger.CraftCore.Util.CoreReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod(java.lang.Class, java.lang.String, java.lang.Class[])'=>'a(java.lang.Class, java.lang.String, java.lang.Class[])' in class 'me.MiniDigger.CraftCore.Util.CoreReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatusCode()'=>'b()' in class 'org.apache.http.message.BasicStatusLine'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'register(me.MiniDigger.Core.Protocol.SignListeners$SignListener)'=>'a(me.MiniDigger.Core.Protocol.SignListeners$SignListener)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignListeners'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'read()'=>'b()' in class 'org.apache.http.io.SessionInputBuffer'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'read(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.io.SessionInputBuffer'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'readLine(org.apache.http.util.CharArrayBuffer)'=>'a(org.apache.http.util.CharArrayBuffer)' in class 'org.apache.http.io.SessionInputBuffer'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.BackoffStrategyExec'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'hideTag(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.CraftCore.Nametag.CoreNametagHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enable()'=>'a()' in class 'me.MiniDigger.CraftCore.Nametag.CoreNametagHandler'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'disable()'=>'b()' in class 'me.MiniDigger.CraftCore.Nametag.CoreNametagHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.VillagerFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.VillagerFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.VillagerFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init(me.MiniDigger.Core.Phase.Phase)'=>'a(me.MiniDigger.Core.Phase.Phase)' in class 'me.MiniDigger.CraftCore.Feature.Features.VillagerFeature'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init(me.MiniDigger.Core.Phase.Phase)'=>'a(me.MiniDigger.Core.Phase.Phase)' in class 'me.MiniDigger.CraftCore.Feature.CoreFeature'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.CoreFeature'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.Channels.SquadChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'zipFolder(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'me.MiniDigger.Core.Util.ZipUtil'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'values()'=>'a()' in class 'me.MiniDigger.Core.Stats.StatsType$GetTheDrop'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'showFile(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'me.MiniDigger.Core.REST.RESTHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$1'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.BasicSecureHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicSecureHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRedirect(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.DefaultRedirectStrategy'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRedirected(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.DefaultRedirectStrategy'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.auth.DigestSchemeFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.entity.StringEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.entity.StringEntity'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isStreaming()'=>'g()' in class 'org.apache.http.entity.StringEntity'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.entity.StringEntity'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.security.cert.X509Certificate)'=>'a(java.lang.String, java.security.cert.X509Certificate)' in class 'org.apache.http.conn.ssl.AbstractVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.lang.String[], java.lang.String[], boolean)'=>'a(java.lang.String, java.lang.String[], java.lang.String[], boolean)' in class 'org.apache.http.conn.ssl.AbstractVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'countDots(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.conn.ssl.AbstractVerifier'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'lookup(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.config.Lookup'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getConfig()'=>'a()' in class 'org.apache.http.client.methods.Configurable'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getOpcode()'=>'c()' in class 'org.java_websocket.framing.Framedata'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isFin()'=>'a()' in class 'org.java_websocket.framing.Framedata'. Given that the prefix 'is' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getReason(int, java.util.Locale)'=>'a(int, java.util.Locale)' in class 'org.apache.http.ReasonPhraseCatalog'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserAgent(java.lang.String, java.lang.String, java.lang.Class)'=>'a(java.lang.String, java.lang.String, java.lang.Class)' in class 'org.apache.http.util.VersionInfo'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRelease()'=>'a()' in class 'org.apache.http.util.VersionInfo'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'decode(byte[])'=>'a(byte[])' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'encode(byte[])'=>'b(byte[])' in class 'org.apache.commons.codec.binary.BaseNCodec'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLeased()'=>'a()' in class 'org.apache.http.pool.PoolStats'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMax()'=>'c()' in class 'org.apache.http.pool.PoolStats'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAvailable()'=>'b()' in class 'org.apache.http.pool.PoolStats'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'nextInt(int)'=>'a(int)' in class 'me.MiniDigger.CraftCore.Util.CoreRandomUtil'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.message.BasicRequestLine'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUri()'=>'c()' in class 'org.apache.http.message.BasicRequestLine'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'a()' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(me.MiniDigger.Core.Stats.StatsType)'=>'a(me.MiniDigger.Core.Stats.StatsType)' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'b()' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'b()' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'save()'=>'a()' in class 'me.MiniDigger.CraftCore.Stats.CoreStats'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(java.lang.Object)'=>'a(java.lang.Object)' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.TwoPlayerFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.TwoPlayerFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.TwoPlayerFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enable()'=>'a()' in class 'me.MiniDigger.CraftCore.Command.Commands.TrollCommands$ChunkBreaker'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.Channels.PremiumChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'formatTime(int)'=>'a(int)' in class 'me.MiniDigger.Core.Util.TimeUtil'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'values(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Stats.StatsType$StatsGame'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'say(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.REST.DashingHandler'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.Core.REST.DashingHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKey()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SignChangers$SignChanger'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.Core.Protocol.SignChangers$SignChanger'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicMaxAgeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.auth.BasicSchemeFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.entity.BasicHttpEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setContent(java.io.InputStream)'=>'a(java.io.InputStream)' in class 'org.apache.http.entity.BasicHttpEntity'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.entity.BasicHttpEntity'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isStreaming()'=>'g()' in class 'org.apache.http.entity.BasicHttpEntity'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.entity.BasicHttpEntity'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.config.ConnectionConfig$Builder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'forVersion(int, int)'=>'a(int, int)' in class 'org.apache.http.HttpVersion'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setOptcode(org.java_websocket.framing.Framedata$Opcode)'=>'a(org.java_websocket.framing.Framedata$Opcode)' in class 'org.java_websocket.framing.FrameBuilder'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setFin(boolean)'=>'c(boolean)' in class 'org.java_websocket.framing.FrameBuilder'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPayload(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.framing.FrameBuilder'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isBlank(java.lang.CharSequence)'=>'b(java.lang.CharSequence)' in class 'org.apache.http.util.TextUtils'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isEmpty(java.lang.CharSequence)'=>'a(java.lang.CharSequence)' in class 'org.apache.http.util.TextUtils'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPoolEntry(long, java.util.concurrent.TimeUnit)'=>'a(long, java.util.concurrent.TimeUnit)' in class 'org.apache.http.pool.AbstractConnPool$2'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.message.BasicNameValuePair'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.message.BasicNameValuePair'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSquad(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.CraftCore.Squad.CoreSquadHandler'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.io.SessionOutputBuffer)'=>'a(org.apache.http.io.SessionOutputBuffer)' in class 'org.apache.http.io.HttpMessageWriterFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'spawn(me.MiniDigger.Core.User.User)'=>'a(me.MiniDigger.Core.User.User)' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSpawn(me.MiniDigger.Core.Team.Team)'=>'a(me.MiniDigger.Core.Team.Team)' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSpawnFeature'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'toString(java.lang.String[])'=>'a(java.lang.String[])' in class 'me.MiniDigger.Core.Util.StringUtil'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'contains(java.lang.Object[], java.lang.Object)'=>'a(java.lang.Object[], java.lang.Object)' in class 'me.MiniDigger.Core.Util.StringUtil'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'values()'=>'a()' in class 'me.MiniDigger.Core.Stats.StatsType$Common'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'update()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SignChangers'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'b()' in class 'me.MiniDigger.Core.Protocol.SignChangers'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicExpiresHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isComplete()'=>'d()' in class 'org.apache.http.impl.auth.DigestScheme'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'a()' in class 'org.apache.http.impl.auth.DigestScheme'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isChunked()'=>'b()' in class 'org.apache.http.entity.AbstractHttpEntity'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setChunked(boolean)'=>'c(boolean)' in class 'org.apache.http.entity.AbstractHttpEntity'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBufferSize()'=>'a()' in class 'org.apache.http.config.ConnectionConfig'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCharset()'=>'c()' in class 'org.apache.http.config.ConnectionConfig'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'forVersion(int, int)'=>'a(int, int)' in class 'org.apache.http.ProtocolVersion'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isComparable(org.apache.http.ProtocolVersion)'=>'a(org.apache.http.ProtocolVersion)' in class 'org.apache.http.ProtocolVersion'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMinor()'=>'c()' in class 'org.apache.http.ProtocolVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'lessEquals(org.apache.http.ProtocolVersion)'=>'c(org.apache.http.ProtocolVersion)' in class 'org.apache.http.ProtocolVersion'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getProtocol()'=>'a()' in class 'org.apache.http.ProtocolVersion'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMajor()'=>'b()' in class 'org.apache.http.ProtocolVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMessage()'=>'b()' in class 'org.java_websocket.framing.CloseFrame'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCloseCode()'=>'a()' in class 'org.java_websocket.framing.CloseFrame'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'wakeup()'=>'a()' in class 'org.apache.http.pool.PoolEntryFuture'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'await(java.util.Date)'=>'a(java.util.Date)' in class 'org.apache.http.pool.PoolEntryFuture'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'nextHeader()'=>'a()' in class 'org.apache.http.message.BasicListHeaderIterator'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getOwner()'=>'a()' in class 'me.MiniDigger.CraftCore.Squad.CoreSquad'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMembers()'=>'b()' in class 'me.MiniDigger.CraftCore.Squad.CoreSquad'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(org.apache.http.HttpMessage)'=>'a(org.apache.http.HttpMessage)' in class 'org.apache.http.io.HttpMessageWriter'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965VersionAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965VersionAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2965VersionAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setTeams(java.util.List)'=>'a(java.util.List)' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamFeature'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.Channels.GlobalChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'doShutdown()'=>'a()' in class 'me.MiniDigger.Core.Util.ShutdownUtil'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'valueOf(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Stats.StatsType'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getGame()'=>'a()' in class 'me.MiniDigger.Core.Stats.StatsType'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getStats()'=>'b()' in class 'me.MiniDigger.Core.Stats.StatsType'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'values()'=>'d()' in class 'me.MiniDigger.Core.Stats.StatsType'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getManager()'=>'b()' in class 'me.MiniDigger.Core.Protocol.ProtocolHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.Core.Protocol.ProtocolHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getFame()'=>'c()' in class 'me.MiniDigger.Core.Protocol.ProtocolHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicCommentHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isComplete()'=>'d()' in class 'org.apache.http.impl.auth.BasicScheme'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'a()' in class 'org.apache.http.impl.auth.BasicScheme'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPorts(int[])'=>'a(int[])' in class 'org.apache.http.cookie.SetCookie2'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setDiscard(boolean)'=>'d(boolean)' in class 'org.apache.http.cookie.SetCookie2'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setCommentURL(java.lang.String)'=>'f(java.lang.String)' in class 'org.apache.http.cookie.SetCookie2'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCore()'=>'a()' in class 'me.MiniDigger.CraftCore.CoreMain'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'error(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.CraftCore.CoreMain'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'info(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.CoreMain'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'completed(java.lang.Object)'=>'a(java.lang.Object)' in class 'org.apache.http.concurrent.FutureCallback'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'cancelled()'=>'a()' in class 'org.apache.http.concurrent.FutureCallback'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'failed(java.lang.Exception)'=>'a(java.lang.Exception)' in class 'org.apache.http.concurrent.FutureCallback'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(java.lang.Object)'=>'a(java.lang.Object)' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorSender$ClientThread'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.io.InputStream)'=>'a(java.io.InputStream)' in class 'org.apache.http.client.entity.InputStreamFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.NameValuePair'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.NameValuePair'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserToken(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.UserTokenHandler'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'equals(java.lang.Object, java.lang.Object)'=>'a(java.lang.Object, java.lang.Object)' in class 'org.apache.http.util.LangUtils'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'equals(java.lang.Object[], java.lang.Object[])'=>'a(java.lang.Object[], java.lang.Object[])' in class 'org.apache.http.util.LangUtils'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'hashCode(int, boolean)'=>'a(int, boolean)' in class 'org.apache.http.util.LangUtils'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'hashCode(int, int)'=>'a(int, int)' in class 'org.apache.http.util.LangUtils'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'hashCode(int, java.lang.Object)'=>'a(int, java.lang.Object)' in class 'org.apache.http.util.LangUtils'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close()'=>'g()' in class 'org.apache.http.impl.conn.CPoolEntry'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isClosed()'=>'h()' in class 'org.apache.http.impl.conn.CPoolEntry'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isExpired(long)'=>'a(long)' in class 'org.apache.http.impl.conn.CPoolEntry'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRedirect(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.RedirectStrategy'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRedirected(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.RedirectStrategy'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onSignDone(org.bukkit.entity.Player, java.lang.String[])'=>'a(org.bukkit.entity.Player, java.lang.String[])' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$12'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.io.SessionInputBuffer, org.apache.http.config.MessageConstraints)'=>'a(org.apache.http.io.SessionInputBuffer, org.apache.http.config.MessageConstraints)' in class 'org.apache.http.io.HttpMessageParserFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.client.methods.HttpUriRequest)'=>'a(org.apache.http.client.methods.HttpUriRequest)' in class 'org.apache.http.client.HttpClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.cookie.RFC2965SpecProvider'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSender()'=>'b()' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.CraftCore.Mirror.CoreMirrorHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'calcSizes()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getTeam(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getTeam(me.MiniDigger.Core.User.User)'=>'a(me.MiniDigger.Core.User.User)' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getTeam(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'balance()'=>'b()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamSelectFeature'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCookies()'=>'a()' in class 'org.apache.http.client.CookieStore'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addCookie(org.apache.http.cookie.Cookie)'=>'a(org.apache.http.cookie.Cookie)' in class 'org.apache.http.client.CookieStore'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'backOff(org.apache.http.conn.routing.HttpRoute)'=>'a(org.apache.http.conn.routing.HttpRoute)' in class 'org.apache.http.client.BackoffManager'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'probe(org.apache.http.conn.routing.HttpRoute)'=>'b(org.apache.http.conn.routing.HttpRoute)' in class 'org.apache.http.client.BackoffManager'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.Channels.EmptyChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'select(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.AuthenticationStrategy'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getChallenges(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.AuthenticationStrategy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'authFailed(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.AuthenticationStrategy'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getField(java.lang.Class, java.lang.String)'=>'a(java.lang.Class, java.lang.String)' in class 'me.MiniDigger.Core.Util.ReflectionUtil'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHandle(org.bukkit.entity.Entity)'=>'a(org.bukkit.entity.Entity)' in class 'me.MiniDigger.Core.Util.ReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCraftClass(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Util.ReflectionUtil'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHandle(org.bukkit.World)'=>'a(org.bukkit.World)' in class 'me.MiniDigger.Core.Util.ReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod(java.lang.Class, java.lang.String)'=>'b(java.lang.Class, java.lang.String)' in class 'me.MiniDigger.Core.Util.ReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod(java.lang.Class, java.lang.String, java.lang.Class[])'=>'a(java.lang.Class, java.lang.String, java.lang.Class[])' in class 'me.MiniDigger.Core.Util.ReflectionUtil'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'remove(org.apache.http.HttpHost)'=>'b(org.apache.http.HttpHost)' in class 'org.apache.http.client.AuthCache'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(org.apache.http.HttpHost)'=>'a(org.apache.http.HttpHost)' in class 'org.apache.http.client.AuthCache'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'put(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)'=>'a(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)' in class 'org.apache.http.client.AuthCache'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.Core.Stats.StatsHandler'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getTop(me.MiniDigger.Core.Stats.StatsType, int)'=>'a(me.MiniDigger.Core.Stats.StatsType, int)' in class 'me.MiniDigger.Core.Stats.StatsHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMainGame()'=>'a()' in class 'me.MiniDigger.Core.Game.GameHandler'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'removeGame(me.MiniDigger.Core.Game.Game)'=>'a(me.MiniDigger.Core.Game.Game)' in class 'me.MiniDigger.Core.Game.GameHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.AbstractCookieAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.AbstractCookieAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.client.methods.HttpUriRequest)'=>'b(org.apache.http.client.methods.HttpUriRequest)' in class 'org.apache.http.impl.client.CloseableHttpClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.client.methods.HttpUriRequest)'=>'a(org.apache.http.client.methods.HttpUriRequest)' in class 'org.apache.http.impl.client.CloseableHttpClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.client.methods.HttpUriRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.CloseableHttpClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRealm()'=>'b()' in class 'org.apache.http.impl.auth.RFC2617Scheme'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getParameter(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.auth.RFC2617Scheme'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setComment(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.cookie.SetCookie'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setExpiryDate(java.util.Date)'=>'a(java.util.Date)' in class 'org.apache.http.cookie.SetCookie'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPath(java.lang.String)'=>'e(java.lang.String)' in class 'org.apache.http.cookie.SetCookie'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setSecure(boolean)'=>'c(boolean)' in class 'org.apache.http.cookie.SetCookie'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setDomain(java.lang.String)'=>'d(java.lang.String)' in class 'org.apache.http.cookie.SetCookie'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setVersion(int)'=>'b(int)' in class 'org.apache.http.cookie.SetCookie'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isSecure()'=>'g()' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'toRoute()'=>'a()' in class 'org.apache.http.conn.routing.RouteTracker'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getProxyHost()'=>'d()' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHopTarget(int)'=>'a(int)' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isLayered()'=>'f()' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHopCount()'=>'c()' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTargetHost()'=>'a()' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isTunnelled()'=>'e()' in class 'org.apache.http.conn.routing.RouteTracker'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Generator.CoreCleanroomChunkGenerator'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'cancel()'=>'a()' in class 'org.apache.http.concurrent.Cancellable'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.client.config.RequestConfig$Builder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setCookieSpec(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.client.config.RequestConfig$Builder'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setProxy(org.apache.http.HttpHost)'=>'a(org.apache.http.HttpHost)' in class 'org.apache.http.client.config.RequestConfig$Builder'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'reset()'=>'a()' in class 'org.java_websocket.drafts.Draft_75'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.HttpResponseInterceptor'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'consume(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.util.EntityUtils'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'toString(org.apache.http.HttpEntity, java.nio.charset.Charset)'=>'a(org.apache.http.HttpEntity, java.nio.charset.Charset)' in class 'org.apache.http.util.EntityUtils'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close()'=>'g()' in class 'org.apache.http.pool.PoolEntry'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getExpiry()'=>'f()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRoute()'=>'b()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUpdated()'=>'e()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setState(java.lang.Object)'=>'a(java.lang.Object)' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isClosed()'=>'h()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getId()'=>'a()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'get' is common, only 2 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getState()'=>'d()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isExpired(long)'=>'a(long)' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getConnection()'=>'c()' in class 'org.apache.http.pool.PoolEntry'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSession(java.net.InetSocketAddress)'=>'c(java.net.InetSocketAddress)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getServer()'=>'a()' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSession(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'reciveName(java.lang.String, java.net.InetSocketAddress)'=>'a(java.lang.String, java.net.InetSocketAddress)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getClient()'=>'b()' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'update()'=>'a()' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'b()' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse()'=>'a()' in class 'org.apache.http.io.HttpMessageParser'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965PortAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965PortAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2965PortAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamDeathMatchFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamDeathMatchFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.TeamDeathMatchFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.Channels.BroadcastChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'nextInt(int)'=>'a(int)' in class 'me.MiniDigger.Core.Util.RandomUtil'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'a()' in class 'me.MiniDigger.Core.Stats.Stats'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(me.MiniDigger.Core.Stats.StatsType)'=>'a(me.MiniDigger.Core.Stats.StatsType)' in class 'me.MiniDigger.Core.Stats.Stats'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'b()' in class 'me.MiniDigger.Core.Stats.Stats'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKey()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SkullChangers$SkullChanger'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPhase(me.MiniDigger.Core.Phase.Phase)'=>'a(me.MiniDigger.Core.Phase.Phase)' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPrefix()'=>'c()' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getGameData(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setGameData(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'allowJoin()'=>'f()' in class 'me.MiniDigger.Core.Game.Game'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'e()' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getIdentifier()'=>'a()' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayers()'=>'b()' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end(me.MiniDigger.Core.User.User[])'=>'a(me.MiniDigger.Core.User.User[])' in class 'me.MiniDigger.Core.Game.Game'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPhase()'=>'d()' in class 'me.MiniDigger.Core.Game.Game'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'output(byte[])'=>'a(byte[])' in class 'org.apache.http.impl.conn.Wire'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'output(int)'=>'b(int)' in class 'org.apache.http.impl.conn.Wire'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enabled()'=>'a()' in class 'org.apache.http.impl.conn.Wire'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'input(int)'=>'e(int)' in class 'org.apache.http.impl.conn.Wire'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'output(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.conn.Wire'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'input(byte[], int, int)'=>'b(byte[], int, int)' in class 'org.apache.http.impl.conn.Wire'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'output(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.impl.conn.Wire'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'input(byte[])'=>'b(byte[])' in class 'org.apache.http.impl.conn.Wire'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'input(java.lang.String)'=>'d(java.lang.String)' in class 'org.apache.http.impl.conn.Wire'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isComplete()'=>'d()' in class 'org.apache.http.impl.auth.NTLMScheme'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'a()' in class 'org.apache.http.impl.auth.NTLMScheme'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRealm()'=>'b()' in class 'org.apache.http.impl.auth.NTLMScheme'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.cookie.CookieSpecProvider'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isTunnelled()'=>'e()' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isSecure()'=>'g()' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHopCount()'=>'c()' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isLayered()'=>'f()' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTargetHost()'=>'a()' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHopTarget(int)'=>'a(int)' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getProxyHost()'=>'d()' in class 'org.apache.http.conn.routing.RouteInfo'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'format(java.lang.Iterable, java.nio.charset.Charset)'=>'a(java.lang.Iterable, java.nio.charset.Charset)' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(java.lang.String, java.nio.charset.Charset, char[])'=>'a(java.lang.String, java.nio.charset.Charset, char[])' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(java.lang.String, java.nio.charset.Charset)'=>'a(java.lang.String, java.nio.charset.Charset)' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'format(java.lang.Iterable, char, java.nio.charset.Charset)'=>'a(java.lang.Iterable, char, java.nio.charset.Charset)' in class 'org.apache.http.client.utils.URLEncodedUtils'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'custom()'=>'r()' in class 'org.apache.http.client.config.RequestConfig'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCookieSpec()'=>'e()' in class 'org.apache.http.client.config.RequestConfig'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getProxy()'=>'b()' in class 'org.apache.http.client.config.RequestConfig'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBytes(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.apache.http.util.EncodingUtils'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAsciiBytes(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.util.EncodingUtils'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getField(java.lang.Class, java.lang.String)'=>'a(java.lang.Class, java.lang.String)' in class 'net.amoebaman.util.Reflection'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'net.amoebaman.util.Reflection'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHandle(java.lang.Object)'=>'a(java.lang.Object)' in class 'net.amoebaman.util.Reflection'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod(java.lang.Class, java.lang.String, java.lang.Class[])'=>'a(java.lang.Class, java.lang.String, java.lang.Class[])' in class 'net.amoebaman.util.Reflection'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNMSClass(java.lang.String)'=>'a(java.lang.String)' in class 'net.amoebaman.util.Reflection'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAddress()'=>'c()' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isIdentified()'=>'b()' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setClient(me.MiniDigger.Core.Socket.Client.Client)'=>'a(me.MiniDigger.Core.Socket.Client.Client)' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setIdentified(boolean)'=>'c(boolean)' in class 'me.MiniDigger.CraftCore.Socket.CoreSession'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'length()'=>'a()' in class 'org.apache.http.io.BufferInfo'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965DomainAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965DomainAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2965DomainAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addMap(me.MiniDigger.Core.Map.MapData)'=>'a(me.MiniDigger.Core.Map.MapData)' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAuthor(java.lang.String)'=>'b(java.lang.String)' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMap(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName(java.lang.String)'=>'c(java.lang.String)' in class 'me.MiniDigger.CraftCore.Map.CoreMapHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpecateFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpecateFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpecateFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPrefix()'=>'b()' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isGlobal()'=>'b()' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getListeners()'=>'a()' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'broadcast(mkremins.fanciful.FancyMessage)'=>'a(mkremins.fanciful.FancyMessage)' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init(java.lang.String, org.bukkit.ChatColor, java.lang.String, java.lang.String, mkremins.fanciful.FancyMessage)'=>'a(java.lang.String, org.bukkit.ChatColor, java.lang.String, java.lang.String, mkremins.fanciful.FancyMessage)' in class 'me.MiniDigger.CraftCore.Chat.CoreChatChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSquad(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.Core.Squad.SquadHandler'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'update()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SkullChangers'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'b()' in class 'me.MiniDigger.Core.Protocol.SkullChangers'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.Core.Phase.Phase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFeatures()'=>'g()' in class 'me.MiniDigger.Core.Phase.Phase'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'displayBar()'=>'d()' in class 'me.MiniDigger.Core.Phase.Phase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarMessage()'=>'c()' in class 'me.MiniDigger.Core.Phase.Phase'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.Core.Phase.Phase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getGame()'=>'f()' in class 'me.MiniDigger.Core.Phase.Phase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'i()' in class 'me.MiniDigger.Core.Phase.Phase'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getFeature(me.MiniDigger.Core.Feature.FeatureType)'=>'a(me.MiniDigger.Core.Feature.FeatureType)' in class 'me.MiniDigger.Core.Phase.Phase'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.Core.Feature.Feature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.Core.Feature.Feature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.Core.Feature.Feature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init(me.MiniDigger.Core.Phase.Phase)'=>'a(me.MiniDigger.Core.Phase.Phase)' in class 'me.MiniDigger.Core.Feature.Feature'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCloseCode()'=>'a()' in class 'org.java_websocket.exceptions.InvalidDataException'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCookies()'=>'a()' in class 'org.apache.http.impl.client.BasicCookieStore'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addCookie(org.apache.http.cookie.Cookie)'=>'a(org.apache.http.cookie.Cookie)' in class 'org.apache.http.impl.client.BasicCookieStore'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'a()' in class 'org.apache.http.impl.auth.SPNegoScheme'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRealm()'=>'b()' in class 'org.apache.http.impl.auth.SPNegoScheme'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.cookie.CookieSpec'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.cookie.CookieSpec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.cookie.CookieSpec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'org.apache.http.cookie.CookieSpec'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'resolve(java.net.URI, java.net.URI)'=>'a(java.net.URI, java.net.URI)' in class 'org.apache.http.client.utils.URIUtils'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'rewriteURI(java.net.URI, org.apache.http.HttpHost, boolean)'=>'a(java.net.URI, org.apache.http.HttpHost, boolean)' in class 'org.apache.http.client.utils.URIUtils'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'rewriteURI(java.net.URI)'=>'a(java.net.URI)' in class 'org.apache.http.client.utils.URIUtils'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPassword()'=>'b()' in class 'org.apache.http.auth.UsernamePasswordCredentials'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'reset()'=>'a()' in class 'org.java_websocket.drafts.Draft_10'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntity()'=>'b()' in class 'org.apache.http.HttpResponse'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatusLine()'=>'a()' in class 'org.apache.http.HttpResponse'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setEntity(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.HttpResponse'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'lookup(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.util.CharsetUtils'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setArray(java.lang.Object[])'=>'a(java.lang.Object[])' in class 'net.amoebaman.util.ArrayWrapper'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'loadAll()'=>'a()' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClientHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeLine(org.apache.http.util.CharArrayBuffer)'=>'a(org.apache.http.util.CharArrayBuffer)' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(int)'=>'b(int)' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeLine(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(byte[])'=>'a(byte[])' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'bind(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'length()'=>'a()' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'flush()'=>'a()' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isBound()'=>'a()' in class 'org.apache.http.impl.io.SessionOutputBufferImpl'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2965DiscardAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'loadChunks()'=>'d()' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'clearLocs()'=>'c()' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load(org.bukkit.configuration.file.FileConfiguration)'=>'a(org.bukkit.configuration.file.FileConfiguration)' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLocs(org.bukkit.DyeColor)'=>'a(org.bukkit.DyeColor)' in class 'me.MiniDigger.CraftCore.Map.CoreMapData'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnerFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'unregister(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Command.CoreCommandHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getOwner()'=>'a()' in class 'me.MiniDigger.Core.Squad.Squad'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMembers()'=>'b()' in class 'me.MiniDigger.Core.Squad.Squad'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKey()'=>'c()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAction()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isAsync()'=>'b()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'doAction(org.bukkit.block.Sign)'=>'a(org.bukkit.block.Sign)' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isFinal()'=>'d()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignListener'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'sendPacket(me.MiniDigger.Core.Packet.Packet, me.MiniDigger.Core.Socket.Session)'=>'a(me.MiniDigger.Core.Packet.Packet, me.MiniDigger.Core.Socket.Session)' in class 'me.MiniDigger.Core.Packet.PacketHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'sendPacket(me.MiniDigger.Core.Packet.Packet)'=>'a(me.MiniDigger.Core.Packet.Packet)' in class 'me.MiniDigger.Core.Packet.PacketHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getResponse()'=>'a()' in class 'org.apache.http.impl.execchain.TunnelRefusedException'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'resolve(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.conn.SystemDefaultDnsResolver'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'remove(org.apache.http.HttpHost)'=>'b(org.apache.http.HttpHost)' in class 'org.apache.http.impl.client.BasicAuthCache'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(org.apache.http.HttpHost)'=>'a(org.apache.http.HttpHost)' in class 'org.apache.http.impl.client.BasicAuthCache'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'put(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)'=>'a(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme)' in class 'org.apache.http.impl.client.BasicAuthCache'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'a()' in class 'org.apache.http.impl.auth.KerberosScheme'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRealm()'=>'b()' in class 'org.apache.http.impl.auth.KerberosScheme'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie)' in class 'org.apache.http.cookie.CookiePathComparator'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo)'=>'a(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo)' in class 'org.apache.http.conn.routing.HttpRouteDirector'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHost()'=>'e()' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPath(java.lang.String)'=>'g(java.lang.String)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.client.utils.URIBuilder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserInfo()'=>'d()' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHost(java.lang.String)'=>'f(java.lang.String)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setCharset(java.nio.charset.Charset)'=>'a(java.nio.charset.Charset)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setScheme(java.lang.String)'=>'d(java.lang.String)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPort(int)'=>'a(int)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPath()'=>'f()' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setUserInfo(java.lang.String)'=>'e(java.lang.String)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setFragment(java.lang.String)'=>'h(java.lang.String)' in class 'org.apache.http.client.utils.URIBuilder'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getDomain()'=>'a()' in class 'org.apache.http.auth.NTUserPrincipal'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUsername()'=>'b()' in class 'org.apache.http.auth.NTUserPrincipal'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'reset()'=>'a()' in class 'org.java_websocket.drafts.Draft'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'readLine(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.drafts.Draft'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'checkAlloc(int)'=>'a(int)' in class 'org.java_websocket.drafts.Draft'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setParseMode(org.java_websocket.WebSocket$Role)'=>'a(org.java_websocket.WebSocket$Role)' in class 'org.java_websocket.drafts.Draft'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.HttpRequestInterceptor'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'substring(int, int)'=>'a(int, int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(char)'=>'a(char)' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(org.apache.http.util.CharArrayBuffer, int, int)'=>'a(org.apache.http.util.CharArrayBuffer, int, int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(char[], int, int)'=>'a(char[], int, int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(org.apache.http.util.ByteArrayBuffer, int, int)'=>'a(org.apache.http.util.ByteArrayBuffer, int, int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'buffer()'=>'b()' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isEmpty()'=>'c()' in class 'org.apache.http.util.CharArrayBuffer'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'indexOf(int)'=>'f(int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clear()'=>'a()' in class 'org.apache.http.util.CharArrayBuffer'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'indexOf(int, int, int)'=>'a(int, int, int)' in class 'org.apache.http.util.CharArrayBuffer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKey()'=>'b()' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clone()'=>'b()' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setValue(java.util.Map)'=>'a(java.util.Map)' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'c()' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setKey(java.lang.String)'=>'a(java.lang.String)' in class 'mkremins.fanciful.TextualComponent$ComplexTextTypeComponent'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAll(me.MiniDigger.Core.Util.EntityUtil$Type[])'=>'a(me.MiniDigger.Core.Util.EntityUtil$Type[])' in class 'me.MiniDigger.CraftCore.Util.CoreEntityUtil'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.lang.Object)'=>'a(java.lang.Object)' in class 'org.apache.http.pool.ConnFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPassword()'=>'a()' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClient'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'b()' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClient'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'save()'=>'a()' in class 'me.MiniDigger.CraftCore.Socket.Client.CoreClient'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fillBuffer()'=>'c()' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clear()'=>'e()' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'read()'=>'b()' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'bind(java.io.InputStream)'=>'a(java.io.InputStream)' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'length()'=>'a()' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'read(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'readLine(org.apache.http.util.CharArrayBuffer)'=>'a(org.apache.http.util.CharArrayBuffer)' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isBound()'=>'a()' in class 'org.apache.http.impl.io.SessionInputBufferImpl'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getManager()'=>'b()' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getFame()'=>'c()' in class 'me.MiniDigger.CraftCore.Protocol.CoreProtocolHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2965CommentUrlAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'spawn(me.MiniDigger.Core.User.User)'=>'a(me.MiniDigger.Core.User.User)' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.SpawnFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayer()'=>'d()' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'e()' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLabel()'=>'b()' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getArgs()'=>'c()' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSender()'=>'a()' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isPlayer()'=>'a()' in class 'me.MiniDigger.CraftCore.Command.CoreCommandArgs'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Packet.Packet'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.Core.Packet.Packet'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle(org.java_websocket.WebSocket)'=>'a(org.java_websocket.WebSocket)' in class 'me.MiniDigger.Core.Packet.Packet'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle()'=>'a()' in class 'me.MiniDigger.Core.Packet.Packet'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isGlobal()'=>'b()' in class 'me.MiniDigger.Core.Chat.ChatChannel'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'chat(me.MiniDigger.Core.User.User, java.lang.String)'=>'a(me.MiniDigger.Core.User.User, java.lang.String)' in class 'me.MiniDigger.Core.Chat.ChatChannel'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.Chat.ChatChannel'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.lang.Object)'=>'a(java.lang.Object)' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$InternalConnectionFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.conn.routing.HttpRoute)'=>'a(org.apache.http.conn.routing.HttpRoute)' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$InternalConnectionFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'select(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.TargetAuthenticationStrategy'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getChallenges(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.TargetAuthenticationStrategy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'authFailed(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.TargetAuthenticationStrategy'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isComplete()'=>'d()' in class 'org.apache.http.impl.auth.GGSSchemeBase'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isSecure()'=>'d()' in class 'org.apache.http.cookie.CookieOrigin'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHost()'=>'a()' in class 'org.apache.http.cookie.CookieOrigin'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPort()'=>'c()' in class 'org.apache.http.cookie.CookieOrigin'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPath()'=>'b()' in class 'org.apache.http.cookie.CookieOrigin'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isTunnelled()'=>'e()' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isSecure()'=>'g()' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHopCount()'=>'c()' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isLayered()'=>'f()' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTargetHost()'=>'a()' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHopTarget(int)'=>'a(int)' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getProxyHost()'=>'d()' in class 'org.apache.http.conn.routing.HttpRoute'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'a()' in class 'me.MiniDigger.CraftCore.Event.Events.CoreUserDeathEvent'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'formatFor(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.client.utils.DateUtils$DateFormatHolder'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserName()'=>'a()' in class 'org.apache.http.auth.NTCredentials'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPassword()'=>'b()' in class 'org.apache.http.auth.NTCredentials'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getDomain()'=>'c()' in class 'org.apache.http.auth.NTCredentials'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'byteAt(int)'=>'f(int)' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clear()'=>'a()' in class 'org.apache.http.util.ByteArrayBuffer'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(char[], int, int)'=>'a(char[], int, int)' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(byte[], int, int)'=>'a(byte[], int, int)' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(org.apache.http.util.CharArrayBuffer, int, int)'=>'a(org.apache.http.util.CharArrayBuffer, int, int)' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isFull()'=>'g()' in class 'org.apache.http.util.ByteArrayBuffer'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'append(int)'=>'e(int)' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'capacity()'=>'c()' in class 'org.apache.http.util.ByteArrayBuffer'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'length()'=>'d()' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'buffer()'=>'e()' in class 'org.apache.http.util.ByteArrayBuffer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isEmpty()'=>'f()' in class 'org.apache.http.util.ByteArrayBuffer'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKey()'=>'b()' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clone()'=>'b()' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setKey(java.lang.String)'=>'a(java.lang.String)' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'c()' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setValue(java.lang.String)'=>'d(java.lang.String)' in class 'mkremins.fanciful.TextualComponent$ArbitraryTextTypeComponent'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'extract(java.io.File, java.io.File)'=>'a(java.io.File, java.io.File)' in class 'me.MiniDigger.CraftCore.Util.CoreDeZipUtil'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getParameters()'=>'c()' in class 'org.apache.http.message.BasicHeaderElement'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.message.BasicHeaderElement'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.message.BasicHeaderElement'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2109DomainHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2109DomainHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.RFC2109DomainHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'register()'=>'b()' in class 'me.MiniDigger.CraftCore.License.CoreLicenseHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.PvPFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.PvPFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.PvPFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'disallow(me.MiniDigger.Core.User.User, org.bukkit.Material[])'=>'b(me.MiniDigger.Core.User.User, org.bukkit.Material[])' in class 'me.MiniDigger.CraftCore.Block.CoreBuildHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'allow(me.MiniDigger.Core.User.User, org.bukkit.Material[])'=>'a(me.MiniDigger.Core.User.User, org.bukkit.Material[])' in class 'me.MiniDigger.CraftCore.Block.CoreBuildHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setBuilder(me.MiniDigger.Core.User.User, boolean)'=>'a(me.MiniDigger.Core.User.User, boolean)' in class 'me.MiniDigger.CraftCore.Block.CoreBuildHandler'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isBuilder(me.MiniDigger.Core.User.User)'=>'a(me.MiniDigger.Core.User.User)' in class 'me.MiniDigger.CraftCore.Block.CoreBuildHandler'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSession(java.net.InetSocketAddress)'=>'c(java.net.InetSocketAddress)' in class 'me.MiniDigger.Core.Socket.SocketHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getServer()'=>'a()' in class 'me.MiniDigger.Core.Socket.SocketHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSession(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Socket.SocketHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'reciveName(java.lang.String, java.net.InetSocketAddress)'=>'a(java.lang.String, java.net.InetSocketAddress)' in class 'me.MiniDigger.Core.Socket.SocketHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getClient()'=>'b()' in class 'me.MiniDigger.Core.Socket.SocketHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'select(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.ProxyAuthenticationStrategy'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getChallenges(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.ProxyAuthenticationStrategy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'authFailed(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.ProxyAuthenticationStrategy'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isProxy()'=>'a()' in class 'org.apache.http.impl.auth.AuthSchemeBase'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'compare(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.Cookie)' in class 'org.apache.http.cookie.CookieIdentityComparator'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'nextStep(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo)'=>'a(org.apache.http.conn.routing.RouteInfo, org.apache.http.conn.routing.RouteInfo)' in class 'org.apache.http.conn.routing.BasicRouteDirector'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'parseDate(java.lang.String, java.lang.String[])'=>'a(java.lang.String, java.lang.String[])' in class 'org.apache.http.client.utils.DateUtils'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'parseDate(java.lang.String, java.lang.String[], java.util.Date)'=>'a(java.lang.String, java.lang.String[], java.util.Date)' in class 'org.apache.http.client.utils.DateUtils'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPassword()'=>'b()' in class 'org.apache.http.auth.KerberosCredentials'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getParams()'=>'d()' in class 'org.apache.http.HttpMessage'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHeaders(java.lang.String)'=>'b(java.lang.String)' in class 'org.apache.http.HttpMessage'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeaders(org.apache.http.Header[])'=>'a(org.apache.http.Header[])' in class 'org.apache.http.HttpMessage'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(org.apache.http.Header)'=>'a(org.apache.http.Header)' in class 'org.apache.http.HttpMessage'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.apache.http.HttpMessage'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeader(java.lang.String, java.lang.String)'=>'b(java.lang.String, java.lang.String)' in class 'org.apache.http.HttpMessage'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAllHeaders()'=>'b()' in class 'org.apache.http.HttpMessage'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'check(boolean, java.lang.String, java.lang.Object)'=>'a(boolean, java.lang.String, java.lang.Object)' in class 'org.apache.http.util.Asserts'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'notNull(java.lang.Object, java.lang.String)'=>'a(java.lang.Object, java.lang.String)' in class 'org.apache.http.util.Asserts'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'check(boolean, java.lang.String)'=>'a(boolean, java.lang.String)' in class 'org.apache.http.util.Asserts'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clone()'=>'b()' in class 'mkremins.fanciful.TextualComponent'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.TextualComponent'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'rawText(java.lang.String)'=>'a(java.lang.String)' in class 'mkremins.fanciful.TextualComponent'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTotalStats()'=>'b()' in class 'org.apache.http.pool.AbstractConnPool'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'lease(java.lang.Object, java.lang.Object, org.apache.http.concurrent.FutureCallback)'=>'a(java.lang.Object, java.lang.Object, org.apache.http.concurrent.FutureCallback)' in class 'org.apache.http.pool.AbstractConnPool'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'a()' in class 'org.apache.http.pool.AbstractConnPool'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'release(org.apache.http.pool.PoolEntry, boolean)'=>'a(org.apache.http.pool.PoolEntry, boolean)' in class 'org.apache.http.pool.AbstractConnPool'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setMaxTotal(int)'=>'b(int)' in class 'org.apache.http.pool.AbstractConnPool'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getStats(java.lang.Object)'=>'c(java.lang.Object)' in class 'org.apache.http.pool.AbstractConnPool'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getElements()'=>'c()' in class 'org.apache.http.message.BasicHeader'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.message.BasicHeader'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.message.BasicHeader'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getServerInfo(com.comphenix.protocol.wrappers.WrappedChatComponent[])'=>'a(com.comphenix.protocol.wrappers.WrappedChatComponent[])' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getServerInfo(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getServers()'=>'b()' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startTask()'=>'a()' in class 'me.MiniDigger.CraftCore.Server.CoreServerHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.io.SessionInputBuffer, org.apache.http.config.MessageConstraints)'=>'a(org.apache.http.io.SessionInputBuffer, org.apache.http.config.MessageConstraints)' in class 'org.apache.http.impl.io.DefaultHttpResponseParserFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.PublicSuffixDomainFilter'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.PublicSuffixDomainFilter'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'decorate(org.apache.http.cookie.CommonCookieAttributeHandler, org.apache.http.conn.util.PublicSuffixMatcher)'=>'a(org.apache.http.cookie.CommonCookieAttributeHandler, org.apache.http.conn.util.PublicSuffixMatcher)' in class 'org.apache.http.impl.cookie.PublicSuffixDomainFilter'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.PublicSuffixDomainFilter'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'loadAll()'=>'a()' in class 'me.MiniDigger.CraftCore.Kit.CoreKitHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'give(org.bukkit.entity.Player, me.MiniDigger.Core.Kit.Kit)'=>'a(org.bukkit.entity.Player, me.MiniDigger.Core.Kit.Kit)' in class 'me.MiniDigger.CraftCore.Kit.CoreKitHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKit(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Kit.CoreKitHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.NoNameTagFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.NoNameTagFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.NoNameTagFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'hideTag(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.Core.Nametag.NametagHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enable()'=>'a()' in class 'me.MiniDigger.Core.Nametag.NametagHandler'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'disable()'=>'b()' in class 'me.MiniDigger.Core.Nametag.NametagHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'cancel()'=>'a()' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(long, java.util.concurrent.TimeUnit)'=>'a(long, java.util.concurrent.TimeUnit)' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager$1'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'select(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(java.util.Map, org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.AuthenticationStrategyImpl'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getChallenges(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.AuthenticationStrategyImpl'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'authFailed(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)'=>'b(org.apache.http.HttpHost, org.apache.http.auth.AuthScheme, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.AuthenticationStrategyImpl'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.NoConnectionReuseStrategy'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.cookie.CookieAttributeHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.cookie.CookieAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.cookie.CookieAttributeHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'resolve(org.apache.http.HttpHost)'=>'a(org.apache.http.HttpHost)' in class 'org.apache.http.conn.SchemePortResolver'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'stringUtf8(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.util.Charsetfunctions'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'asciiBytes(java.lang.String)'=>'b(java.lang.String)' in class 'org.java_websocket.util.Charsetfunctions'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'utf8Bytes(java.lang.String)'=>'a(java.lang.String)' in class 'org.java_websocket.util.Charsetfunctions'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPassword()'=>'b()' in class 'org.apache.http.auth.Credentials'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRemotePort()'=>'b()' in class 'org.apache.http.HttpInetConnection'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'notEmpty(java.lang.CharSequence, java.lang.String)'=>'a(java.lang.CharSequence, java.lang.String)' in class 'org.apache.http.util.Args'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'notEmpty(java.util.Collection, java.lang.String)'=>'a(java.util.Collection, java.lang.String)' in class 'org.apache.http.util.Args'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'positive(int, java.lang.String)'=>'a(int, java.lang.String)' in class 'org.apache.http.util.Args'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'notBlank(java.lang.CharSequence, java.lang.String)'=>'b(java.lang.CharSequence, java.lang.String)' in class 'org.apache.http.util.Args'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'check(boolean, java.lang.String)'=>'a(boolean, java.lang.String)' in class 'org.apache.http.util.Args'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'notNull(java.lang.Object, java.lang.String)'=>'a(java.lang.Object, java.lang.String)' in class 'org.apache.http.util.Args'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'check(boolean, java.lang.String, java.lang.Object[])'=>'a(boolean, java.lang.String, java.lang.Object[])' in class 'org.apache.http.util.Args'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.MessagePart'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clone()'=>'b()' in class 'mkremins.fanciful.MessagePart'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion(org.apache.http.params.HttpParams)'=>'a(org.apache.http.params.HttpParams)' in class 'org.apache.http.params.HttpProtocolParams'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'killPlugin()'=>'a()' in class 'me.MiniDigger.CraftCore.Util.CoreCommonMethods'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntity()'=>'b()' in class 'org.apache.http.message.BasicHttpResponse'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatusLine()'=>'a()' in class 'org.apache.http.message.BasicHttpResponse'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setEntity(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.message.BasicHttpResponse'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setOnline(boolean)'=>'e(boolean)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setNumPlayers(int)'=>'b(int)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNumPlayers()'=>'b()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isJoin()'=>'e()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setMaxPlayers(int)'=>'e(int)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setSpectate(boolean)'=>'d(boolean)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isSpectate()'=>'f()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setJoin(boolean)'=>'c(boolean)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getForThis(boolean)'=>'a(boolean)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMaxPlayers()'=>'c()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isOnline()'=>'g()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isFull()'=>'h()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPhase(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPhase()'=>'d()' in class 'me.MiniDigger.CraftCore.Server.CoreServer'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.io.SessionOutputBuffer)'=>'a(org.apache.http.io.SessionOutputBuffer)' in class 'org.apache.http.impl.io.DefaultHttpRequestWriterFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNextPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'endPhase()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'displayBar()'=>'d()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarMessage()'=>'c()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getGame()'=>'f()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'i()' in class 'me.MiniDigger.CraftCore.Phase.Phases.LobbyPhase'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.cookie.NetscapeDraftSpecProvider'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'c()' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'b()' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getArmor()'=>'a()' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'save()'=>'a()' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'b()' in class 'me.MiniDigger.CraftCore.Kit.CoreKit'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.MobFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.MobFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.MobFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHealth(double)'=>'a(double)' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHealth(float)'=>'b(float)' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMetaPacket(java.lang.Object)'=>'a(java.lang.Object)' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getWatcher()'=>'c()' in class 'me.MiniDigger.CraftCore.Bar.CoreFakeDragon'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAll(me.MiniDigger.Core.Util.EntityUtil$Type[])'=>'a(me.MiniDigger.Core.Util.EntityUtil$Type[])' in class 'me.MiniDigger.Core.Util.EntityUtil'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Socket.Session'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAddress()'=>'c()' in class 'me.MiniDigger.Core.Socket.Session'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isIdentified()'=>'b()' in class 'me.MiniDigger.Core.Socket.Session'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.Socket.Session'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setClient(me.MiniDigger.Core.Socket.Client.Client)'=>'a(me.MiniDigger.Core.Socket.Client.Client)' in class 'me.MiniDigger.Core.Socket.Session'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setIdentified(boolean)'=>'c(boolean)' in class 'me.MiniDigger.Core.Socket.Session'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPlayer(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayer()'=>'b()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'c()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSign()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setUser(me.MiniDigger.Core.User.User)'=>'a(me.MiniDigger.Core.User.User)' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setSign(org.bukkit.block.Sign)'=>'a(org.bukkit.block.Sign)' in class 'me.MiniDigger.Core.Protocol.SignListeners$SignAction'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'hideTag(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.Core.Nametag.NametagEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'disallow(me.MiniDigger.Core.User.User, org.bukkit.Material[])'=>'b(me.MiniDigger.Core.User.User, org.bukkit.Material[])' in class 'me.MiniDigger.Core.Block.BuildHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'allow(me.MiniDigger.Core.User.User, org.bukkit.Material[])'=>'a(me.MiniDigger.Core.User.User, org.bukkit.Material[])' in class 'me.MiniDigger.Core.Block.BuildHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setBuilder(me.MiniDigger.Core.User.User, boolean)'=>'a(me.MiniDigger.Core.User.User, boolean)' in class 'me.MiniDigger.Core.Block.BuildHandler'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'upgrade(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'a()' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setMaxTotal(int)'=>'b(int)' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'connect(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.conn.PoolingHttpClientConnectionManager'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.auth.SPNegoSchemeFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getExpiryDate()'=>'c()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPorts()'=>'f()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isSecure()'=>'g()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isExpired(java.util.Date)'=>'a(java.util.Date)' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getDomain()'=>'d()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'h()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPath()'=>'e()' in class 'org.apache.http.cookie.Cookie'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSSLSession()'=>'b()' in class 'org.apache.http.conn.ManagedHttpClientConnection'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSocket()'=>'a()' in class 'org.apache.http.conn.ManagedHttpClientConnection'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'bind(java.net.Socket)'=>'a(java.net.Socket)' in class 'org.apache.http.conn.ManagedHttpClientConnection'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.ResponseProcessCookies'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'c()' in class 'org.apache.http.HttpHost'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHostName()'=>'a()' in class 'org.apache.http.HttpHost'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAddress()'=>'d()' in class 'org.apache.http.HttpHost'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPort()'=>'b()' in class 'org.apache.http.HttpHost'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'toURI()'=>'e()' in class 'org.apache.http.HttpHost'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.RequestUserAgent'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.JsonString'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'a()' in class 'mkremins.fanciful.JsonString'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getNames()'=>'a()' in class 'org.apache.http.params.HttpParamsNames'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'scroll()'=>'e()' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'scorlling()'=>'d()' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getId()'=>'b()' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Given that the prefix 'get' is common, only 2 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'a()' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSlot()'=>'c()' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardLine'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'endPhase()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.VotePhase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.Phases.VotePhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'displayBar()'=>'d()' in class 'me.MiniDigger.CraftCore.Phase.Phases.VotePhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarMessage()'=>'c()' in class 'me.MiniDigger.CraftCore.Phase.Phases.VotePhase'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.VotePhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'i()' in class 'me.MiniDigger.CraftCore.Phase.Phases.VotePhase'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.MapFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMap()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.MapFeature'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.MapFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.MapFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setMap(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Feature.Features.MapFeature'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setBar(org.bukkit.entity.Player, java.lang.String, float)'=>'a(org.bukkit.entity.Player, java.lang.String, float)' in class 'me.MiniDigger.CraftCore.Bar.CoreBarHandler'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'hasBar(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.CraftCore.Bar.CoreBarHandler'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setBar(org.bukkit.entity.Player, java.lang.String, double)'=>'a(org.bukkit.entity.Player, java.lang.String, double)' in class 'me.MiniDigger.CraftCore.Bar.CoreBarHandler'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'removeBar(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.CraftCore.Bar.CoreBarHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'extract(java.io.File, java.io.File)'=>'a(java.io.File, java.io.File)' in class 'me.MiniDigger.Core.Util.DeZipUtil'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.Core.Protocol.SignListeners'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(java.lang.Object)'=>'a(java.lang.Object)' in class 'me.MiniDigger.Core.Mirror.MirrorSender'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.conn.routing.HttpRoute, org.apache.http.config.ConnectionConfig)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.config.ConnectionConfig)' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.lang.Object, org.apache.http.config.ConnectionConfig)'=>'a(java.lang.Object, org.apache.http.config.ConnectionConfig)' in class 'org.apache.http.impl.conn.ManagedHttpClientConnectionFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.auth.NTLMSchemeFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getReason(int, java.util.Locale)'=>'a(int, java.util.Locale)' in class 'org.apache.http.impl.EnglishReasonPhraseCatalog'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.lang.Object, org.apache.http.config.ConnectionConfig)'=>'a(java.lang.Object, org.apache.http.config.ConnectionConfig)' in class 'org.apache.http.conn.HttpConnectionFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCompleter()'=>'a()' in class 'me.MiniDigger.CraftCore.Command.CoreBukkitCommand'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setCompleter(me.MiniDigger.Core.Command.BukkitCompleter)'=>'a(me.MiniDigger.Core.Command.BukkitCompleter)' in class 'me.MiniDigger.CraftCore.Command.CoreBukkitCommand'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.io.InputStream)'=>'a(java.io.InputStream)' in class 'org.apache.http.client.protocol.ResponseContentEncoding$2'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isBlocking()'=>'d()' in class 'org.java_websocket.WrappedByteChannel'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'readMore(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.WrappedByteChannel'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isNeedWrite()'=>'a()' in class 'org.java_websocket.WrappedByteChannel'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isNeedRead()'=>'c()' in class 'org.java_websocket.WrappedByteChannel'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeMore()'=>'b()' in class 'org.java_websocket.WrappedByteChannel'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntity()'=>'b()' in class 'org.apache.http.HttpEntityEnclosingRequest'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setEntity(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.HttpEntityEnclosingRequest'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.RequestTargetHost'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.JsonRepresentedObject'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'decode(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Util.CoreBaseUtil'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getParameter(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.params.HttpParams'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setParameter(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.params.HttpParams'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'copy()'=>'a()' in class 'org.apache.http.params.HttpParams'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isAborted()'=>'b()' in class 'org.apache.http.impl.client.RequestWrapper'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getURI()'=>'a()' in class 'org.apache.http.impl.client.RequestWrapper'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.impl.client.RequestWrapper'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getOriginal()'=>'b()' in class 'org.apache.http.impl.client.RequestWrapper'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'clearAll()'=>'a()' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboardHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'write(org.apache.http.HttpMessage)'=>'a(org.apache.http.HttpMessage)' in class 'org.apache.http.impl.io.AbstractMessageWriter'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'endPhase()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.GracePhase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.Phases.GracePhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'displayBar()'=>'d()' in class 'me.MiniDigger.CraftCore.Phase.Phases.GracePhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarMessage()'=>'c()' in class 'me.MiniDigger.CraftCore.Phase.Phases.GracePhase'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.GracePhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'i()' in class 'me.MiniDigger.CraftCore.Phase.Phases.GracePhase'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.cookie.IgnoreSpecProvider'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.LivesFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'a()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setClass(java.lang.String, java.lang.Class)'=>'a(java.lang.String, java.lang.Class)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnHandler'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'killPlugin()'=>'a()' in class 'me.MiniDigger.Core.Util.CommonMethods'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPassword()'=>'a()' in class 'me.MiniDigger.Core.Socket.Client.Client'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onSignDone(org.bukkit.entity.Player, java.lang.String[])'=>'a(org.bukkit.entity.Player, java.lang.String[])' in class 'me.MiniDigger.Core.Protocol.SignGUI$SignGUIListener'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'resolve(org.apache.http.HttpHost)'=>'a(org.apache.http.HttpHost)' in class 'org.apache.http.impl.conn.DefaultSchemePortResolver'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.cookie.ClientCookie'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'upgrade(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.conn.HttpClientConnectionOperator'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'connect(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, java.net.InetSocketAddress, int, org.apache.http.config.SocketConfig, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, java.net.InetSocketAddress, int, org.apache.http.config.SocketConfig, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.conn.HttpClientConnectionOperator'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(java.io.InputStream)'=>'a(java.io.InputStream)' in class 'org.apache.http.client.protocol.ResponseContentEncoding$1'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'reset()'=>'a()' in class 'org.apache.http.auth.AuthState'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAuthScheme()'=>'c()' in class 'org.apache.http.auth.AuthState'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getState()'=>'b()' in class 'org.apache.http.auth.AuthState'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'update(org.apache.http.auth.AuthScheme, org.apache.http.auth.Credentials)'=>'a(org.apache.http.auth.AuthScheme, org.apache.http.auth.Credentials)' in class 'org.apache.http.auth.AuthState'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setState(org.apache.http.auth.AuthProtocolState)'=>'a(org.apache.http.auth.AuthProtocolState)' in class 'org.apache.http.auth.AuthState'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'update(java.util.Queue)'=>'a(java.util.Queue)' in class 'org.apache.http.auth.AuthState'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.HttpEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.HttpEntity'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isStreaming()'=>'g()' in class 'org.apache.http.HttpEntity'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isChunked()'=>'b()' in class 'org.apache.http.HttpEntity'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.HttpEntity'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.RequestContent'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'mkremins.fanciful.FancyMessage'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'tooltip(java.lang.String)'=>'c(java.lang.String)' in class 'mkremins.fanciful.FancyMessage'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'then(mkremins.fanciful.TextualComponent)'=>'a(mkremins.fanciful.TextualComponent)' in class 'mkremins.fanciful.FancyMessage'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'color(org.bukkit.ChatColor)'=>'a(org.bukkit.ChatColor)' in class 'mkremins.fanciful.FancyMessage'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'writeJson(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)'=>'a(org.bukkit.craftbukkit.libs.com.google.gson.stream.JsonWriter)' in class 'mkremins.fanciful.FancyMessage'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'then(java.lang.String)'=>'d(java.lang.String)' in class 'mkremins.fanciful.FancyMessage'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'suggest(java.lang.String)'=>'a(java.lang.String)' in class 'mkremins.fanciful.FancyMessage'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clone()'=>'a()' in class 'mkremins.fanciful.FancyMessage'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'tooltip(java.lang.String[])'=>'a(java.lang.String[])' in class 'mkremins.fanciful.FancyMessage'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'style(org.bukkit.ChatColor[])'=>'a(org.bukkit.ChatColor[])' in class 'mkremins.fanciful.FancyMessage'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(org.bukkit.command.CommandSender)'=>'a(org.bukkit.command.CommandSender)' in class 'mkremins.fanciful.FancyMessage'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'command(java.lang.String)'=>'b(java.lang.String)' in class 'mkremins.fanciful.FancyMessage'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntity()'=>'b()' in class 'org.apache.http.client.methods.HttpRequestWrapper$HttpEntityEnclosingRequestWrapper'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setEntity(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.client.methods.HttpRequestWrapper$HttpEntityEnclosingRequestWrapper'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addLine(me.MiniDigger.Core.Scoreboard.ScoreboardLine)'=>'a(me.MiniDigger.Core.Scoreboard.ScoreboardLine)' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLines(org.bukkit.scoreboard.DisplaySlot)'=>'a(org.bukkit.scoreboard.DisplaySlot)' in class 'me.MiniDigger.CraftCore.Scoreboard.CoreScoreboard'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.cookie.DefaultCookieSpecProvider'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.LastManStandingFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.LastManStandingFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.LastManStandingFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAuthor()'=>'b()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'c()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setVersion(java.lang.String)'=>'e(java.lang.String)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPackage(java.lang.String)'=>'f(java.lang.String)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setAuthor(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPackage()'=>'d()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnBean'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getServerInfo(com.comphenix.protocol.wrappers.WrappedChatComponent[])'=>'a(com.comphenix.protocol.wrappers.WrappedChatComponent[])' in class 'me.MiniDigger.Core.Server.ServerHandler'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getServers()'=>'b()' in class 'me.MiniDigger.Core.Server.ServerHandler'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startTask()'=>'a()' in class 'me.MiniDigger.Core.Server.ServerHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSender()'=>'b()' in class 'me.MiniDigger.Core.Mirror.MirrorHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.Core.Mirror.MirrorHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBaseUtil()'=>'P()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMapHandler()'=>'j()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRandomUtil()'=>'J()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getItemUtil()'=>'Q()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStringUtil()'=>'L()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getKitHandler()'=>'B()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getInstance()'=>'d()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getEntityUtil()'=>'H()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTimeUtil()'=>'M()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFileUtil()'=>'I()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getDeZipUtil()'=>'G()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarHandler()'=>'w()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getZipUtil()'=>'N()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSqlHandler()'=>'r()' in class 'me.MiniDigger.CraftCore.CoreCore'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setBar(org.bukkit.entity.Player, java.lang.String, float)'=>'a(org.bukkit.entity.Player, java.lang.String, float)' in class 'me.MiniDigger.Core.Bar.BarHandler'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setBar(org.bukkit.entity.Player, java.lang.String, double)'=>'a(org.bukkit.entity.Player, java.lang.String, double)' in class 'me.MiniDigger.Core.Bar.BarHandler'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'removeBar(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.Core.Bar.BarHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'keepAlive(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.DefaultConnectionReuseStrategy'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load(java.net.URL)'=>'a(java.net.URL)' in class 'org.apache.http.conn.util.PublicSuffixMatcherLoader'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getDefault()'=>'a()' in class 'org.apache.http.conn.util.PublicSuffixMatcherLoader'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'upgrade(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.conn.HttpClientConnectionManager'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'a()' in class 'org.apache.http.conn.HttpClientConnectionManager'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'connect(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpClientConnection, org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.conn.HttpClientConnectionManager'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.ResponseContentEncoding'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getOrigin()'=>'a()' in class 'org.apache.http.auth.AuthScope'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getScheme()'=>'d()' in class 'org.apache.http.auth.AuthScope'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHost()'=>'b()' in class 'org.apache.http.auth.AuthScope'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPort()'=>'c()' in class 'org.apache.http.auth.AuthScope'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.auth.AuthScope)'=>'a(org.apache.http.auth.AuthScope)' in class 'org.apache.http.auth.AuthScope'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getReadyState()'=>'f()' in class 'org.java_websocket.WebSocketImpl'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close(org.java_websocket.exceptions.InvalidDataException)'=>'a(org.java_websocket.exceptions.InvalidDataException)' in class 'org.java_websocket.WebSocketImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close(int, java.lang.String)'=>'a(int, java.lang.String)' in class 'org.java_websocket.WebSocketImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'eot()'=>'b()' in class 'org.java_websocket.WebSocketImpl'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'decode(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.WebSocketImpl'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isOpen()'=>'c()' in class 'org.java_websocket.WebSocketImpl'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isClosing()'=>'d()' in class 'org.java_websocket.WebSocketImpl'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(java.lang.String)'=>'a(java.lang.String)' in class 'org.java_websocket.WebSocketImpl'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close(int)'=>'b(int)' in class 'org.java_websocket.WebSocketImpl'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'sendFrame(org.java_websocket.framing.Framedata)'=>'a(org.java_websocket.framing.Framedata)' in class 'org.java_websocket.WebSocketImpl'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.ImmutableHttpProcessor'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.ImmutableHttpProcessor'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'loadWorld(org.bukkit.WorldCreator)'=>'a(org.bukkit.WorldCreator)' in class 'me.MiniDigger.CraftCore.World.CoreWorldLoader'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getParameter(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.params.BasicHttpParams'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setParameter(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.params.BasicHttpParams'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'copy()'=>'a()' in class 'org.apache.http.params.BasicHttpParams'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'copyParams(org.apache.http.params.HttpParams)'=>'a(org.apache.http.params.HttpParams)' in class 'org.apache.http.params.BasicHttpParams'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getNames()'=>'a()' in class 'org.apache.http.params.BasicHttpParams'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'loadAll()'=>'a()' in class 'me.MiniDigger.CraftCore.User.CoreUserHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.CraftCore.User.CoreUserHandler'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getParams()'=>'d()' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isAborted()'=>'b()' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'wrap(org.apache.http.HttpRequest)'=>'a(org.apache.http.HttpRequest)' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getURI()'=>'a()' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getOriginal()'=>'a()' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getTarget()'=>'b()' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setURI(java.net.URI)'=>'a(java.net.URI)' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'wrap(org.apache.http.HttpRequest, org.apache.http.HttpHost)'=>'a(org.apache.http.HttpRequest, org.apache.http.HttpHost)' in class 'org.apache.http.client.methods.HttpRequestWrapper'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'kill()'=>'b()' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLQuery'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'run()'=>'a()' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLQuery'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatement()'=>'a()' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLQuery'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'endPhase()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.CountdownPhase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.Phases.CountdownPhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'displayBar()'=>'d()' in class 'me.MiniDigger.CraftCore.Phase.Phases.CountdownPhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarMessage()'=>'c()' in class 'me.MiniDigger.CraftCore.Phase.Phases.CountdownPhase'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.Phases.CountdownPhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'i()' in class 'me.MiniDigger.CraftCore.Phase.Phases.CountdownPhase'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.DefaultCookieSpec'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.DefaultCookieSpec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.DefaultCookieSpec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'org.apache.http.impl.cookie.DefaultCookieSpec'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.JumpPadFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.JumpPadFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.JumpPadFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load(me.MiniDigger.Core.AddOn.AddOnBean)'=>'a(me.MiniDigger.Core.AddOn.AddOnBean)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enable()'=>'b()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'disable()'=>'c()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'loadConfig()'=>'a()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBean()'=>'d()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOn'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'decode(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Util.BaseUtil'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPhase(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isSpectate()'=>'f()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMaxPlayers()'=>'c()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setJoin(boolean)'=>'c(boolean)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setSpectate(boolean)'=>'d(boolean)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNumPlayers()'=>'b()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isOnline()'=>'g()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isFull()'=>'h()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPhase()'=>'d()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setMaxPlayers(int)'=>'e(int)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setNumPlayers(int)'=>'b(int)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isJoin()'=>'e()' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setOnline(boolean)'=>'e(boolean)' in class 'me.MiniDigger.Core.Server.Server'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addMap(me.MiniDigger.Core.Map.MapData)'=>'a(me.MiniDigger.Core.Map.MapData)' in class 'me.MiniDigger.Core.Map.MapHandler'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAuthor(java.lang.String)'=>'b(java.lang.String)' in class 'me.MiniDigger.Core.Map.MapHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMap(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Map.MapHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName(java.lang.String)'=>'c(java.lang.String)' in class 'me.MiniDigger.Core.Map.MapHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBaseUtil()'=>'P()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMapHandler()'=>'j()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRandomUtil()'=>'J()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getItemUtil()'=>'Q()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStringUtil()'=>'L()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'disable()'=>'c()' in class 'me.MiniDigger.Core.Core'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getKitHandler()'=>'B()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getInstance()'=>'d()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enable()'=>'a()' in class 'me.MiniDigger.Core.Core'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getEntityUtil()'=>'H()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTimeUtil()'=>'M()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFileUtil()'=>'I()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getDeZipUtil()'=>'G()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCore()'=>'b()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getBarHandler()'=>'w()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getZipUtil()'=>'N()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSqlHandler()'=>'r()' in class 'me.MiniDigger.Core.Core'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'a()' in class 'me.MiniDigger.Core.AddOn.AddOnHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setClass(java.lang.String, java.lang.Class)'=>'a(java.lang.String, java.lang.Class)' in class 'me.MiniDigger.Core.AddOn.AddOnHandler'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'c()' in class 'org.apache.http.impl.conn.LoggingManagedHttpClientConnection'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'matches(java.lang.String)'=>'b(java.lang.String)' in class 'org.apache.http.conn.util.PublicSuffixMatcher'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getDomainRoot(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.conn.util.PublicSuffixMatcher'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'hideTag(org.bukkit.entity.Player)'=>'a(org.bukkit.entity.Player)' in class 'me.MiniDigger.CraftCore.Nametag.CoreNametagEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.RequestExpectContinue'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setHttpStatus(short)'=>'a(short)' in class 'org.java_websocket.handshake.ServerHandshakeBuilder'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.auth.AuthSchemeProvider'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isOpen()'=>'a()' in class 'org.apache.http.HttpConnection'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'c()' in class 'org.apache.http.HttpConnection'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isStale()'=>'b()' in class 'org.apache.http.HttpConnection'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.HttpClientConnection, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.HttpRequestExecutor'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'preProcess(org.apache.http.HttpRequest, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpProcessor, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.HttpRequestExecutor'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'loadWorld(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.World.CoreWorldHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'copyWorld(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.CraftCore.World.CoreWorldHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getNames()'=>'a()' in class 'org.apache.http.params.AbstractHttpParams'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.client.methods.RequestBuilder$InternalRequest'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUrl()'=>'c()' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'a()' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPass()'=>'b()' in class 'me.MiniDigger.CraftCore.SQL.CoreSQLHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse()'=>'a()' in class 'org.apache.http.impl.io.AbstractMessageParser'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'tick(int, int)'=>'a(int, int)' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'endPhase()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSecs()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.CoreTimedPhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.DefaultCookieSpecProvider$1'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedWeatherFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedWeatherFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedWeatherFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'scroll()'=>'e()' in class 'me.MiniDigger.Core.Scoreboard.ScoreboardLine'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'scorlling()'=>'d()' in class 'me.MiniDigger.Core.Scoreboard.ScoreboardLine'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getId()'=>'b()' in class 'me.MiniDigger.Core.Scoreboard.ScoreboardLine'. Given that the prefix 'get' is common, only 2 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'a()' in class 'me.MiniDigger.Core.Scoreboard.ScoreboardLine'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSlot()'=>'c()' in class 'me.MiniDigger.Core.Scoreboard.ScoreboardLine'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$9'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'loadChunks()'=>'d()' in class 'me.MiniDigger.Core.Map.MapData'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'clearLocs()'=>'c()' in class 'me.MiniDigger.Core.Map.MapData'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.Map.MapData'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLocs(org.bukkit.DyeColor)'=>'a(org.bukkit.DyeColor)' in class 'me.MiniDigger.Core.Map.MapData'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'aliases()'=>'b()' in class 'me.MiniDigger.Core.Command.Completer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'name()'=>'a()' in class 'me.MiniDigger.Core.Command.Completer'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'findClass(java.lang.String, boolean)'=>'a(java.lang.String, boolean)' in class 'me.MiniDigger.Core.AddOn.AddOnClassLoader'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getClasses()'=>'a()' in class 'me.MiniDigger.Core.AddOn.AddOnClassLoader'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'finish()'=>'c()' in class 'org.apache.http.impl.io.ChunkedOutputStream'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSSLSession()'=>'b()' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSocket()'=>'a()' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'c()' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAttribute(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'bind(java.net.Socket)'=>'a(java.net.Socket)' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getId()'=>'a()' in class 'org.apache.http.impl.conn.DefaultManagedHttpClientConnection'. Given that the prefix 'get' is common, only 2 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(java.io.Reader)'=>'a(java.io.Reader)' in class 'org.apache.http.conn.util.PublicSuffixListParser'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'resolve(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.conn.DnsResolver'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.RequestDefaultHeaders'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onOpen(org.java_websocket.WebSocket, org.java_websocket.handshake.ClientHandshake)'=>'b(org.java_websocket.WebSocket, org.java_websocket.handshake.ClientHandshake)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketServer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onClose(org.java_websocket.WebSocket, int, java.lang.String, boolean)'=>'d(org.java_websocket.WebSocket, int, java.lang.String, boolean)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketServer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onError(org.java_websocket.WebSocket, java.lang.Exception)'=>'c(org.java_websocket.WebSocket, java.lang.Exception)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketServer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onMessage(org.java_websocket.WebSocket, java.lang.String)'=>'b(org.java_websocket.WebSocket, java.lang.String)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketServer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'flush()'=>'b()' in class 'org.apache.http.HttpClientConnection'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'add(org.apache.http.HttpRequestInterceptor)'=>'c(org.apache.http.HttpRequestInterceptor)' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addLast(org.apache.http.HttpRequestInterceptor)'=>'b(org.apache.http.HttpRequestInterceptor)' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'add(org.apache.http.HttpResponseInterceptor)'=>'c(org.apache.http.HttpResponseInterceptor)' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'d()' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addAll(org.apache.http.HttpRequestInterceptor[])'=>'b(org.apache.http.HttpRequestInterceptor[])' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addFirst(org.apache.http.HttpRequestInterceptor)'=>'a(org.apache.http.HttpRequestInterceptor)' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addLast(org.apache.http.HttpResponseInterceptor)'=>'b(org.apache.http.HttpResponseInterceptor)' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addAllLast(org.apache.http.HttpRequestInterceptor[])'=>'a(org.apache.http.HttpRequestInterceptor[])' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addFirst(org.apache.http.HttpResponseInterceptor)'=>'a(org.apache.http.HttpResponseInterceptor)' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create()'=>'a()' in class 'org.apache.http.protocol.HttpProcessorBuilder'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'parseValue(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, java.util.BitSet)'=>'b(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, java.util.BitSet)' in class 'org.apache.http.message.TokenParser'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'parseToken(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, java.util.BitSet)'=>'a(org.apache.http.util.CharArrayBuffer, org.apache.http.message.ParserCursor, java.util.BitSet)' in class 'org.apache.http.message.TokenParser'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isWhitespace(char)'=>'a(char)' in class 'org.apache.http.message.TokenParser'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'b()' in class 'me.MiniDigger.CraftCore.User.CoreBot'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBotUUID()'=>'a()' in class 'me.MiniDigger.CraftCore.User.CoreBot'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'save()'=>'a()' in class 'me.MiniDigger.CraftCore.User.CoreBot'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.client.methods.HttpHead'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.ServiceUnavailableRetryExec'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.BasicPathHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.BasicPathHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicPathHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedTimeFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(java.util.UUID)'=>'a(java.util.UUID)' in class 'me.MiniDigger.Core.User.UserHandler'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'clearAll()'=>'a()' in class 'me.MiniDigger.Core.Scoreboard.ScoreboardHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$8'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'error(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.Core.Main'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'info(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Main'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAuthor()'=>'b()' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'c()' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setVersion(java.lang.String)'=>'e(java.lang.String)' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setName(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPackage(java.lang.String)'=>'f(java.lang.String)' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setAuthor(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPackage()'=>'d()' in class 'me.MiniDigger.Core.AddOn.AddOnBean'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setHttpStatus(short)'=>'a(short)' in class 'org.java_websocket.handshake.HandshakeImpl1Server'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onMessage(org.java_websocket.WebSocket, java.nio.ByteBuffer)'=>'b(org.java_websocket.WebSocket, java.nio.ByteBuffer)' in class 'org.java_websocket.server.WebSocketServer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onOpen(org.java_websocket.WebSocket, org.java_websocket.handshake.ClientHandshake)'=>'b(org.java_websocket.WebSocket, org.java_websocket.handshake.ClientHandshake)' in class 'org.java_websocket.server.WebSocketServer'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onClose(org.java_websocket.WebSocket, int, java.lang.String, boolean)'=>'d(org.java_websocket.WebSocket, int, java.lang.String, boolean)' in class 'org.java_websocket.server.WebSocketServer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onError(org.java_websocket.WebSocket, java.lang.Exception)'=>'c(org.java_websocket.WebSocket, java.lang.Exception)' in class 'org.java_websocket.server.WebSocketServer'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'stop(int)'=>'b(int)' in class 'org.java_websocket.server.WebSocketServer'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onClosing(org.java_websocket.WebSocket, int, java.lang.String, boolean)'=>'c(org.java_websocket.WebSocket, int, java.lang.String, boolean)' in class 'org.java_websocket.server.WebSocketServer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onMessage(org.java_websocket.WebSocket, java.lang.String)'=>'b(org.java_websocket.WebSocket, java.lang.String)' in class 'org.java_websocket.server.WebSocketServer'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'a()' in class 'org.java_websocket.server.WebSocketServer'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'stop()'=>'b()' in class 'org.java_websocket.server.WebSocketServer'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'atEnd()'=>'c()' in class 'org.apache.http.message.ParserCursor'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPos()'=>'b()' in class 'org.apache.http.message.ParserCursor'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'updatePos(int)'=>'b(int)' in class 'org.apache.http.message.ParserCursor'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUpperBound()'=>'a()' in class 'org.apache.http.message.ParserCursor'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.client.methods.HttpGet'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.RetryExec'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.NetscapeDomainHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.NetscapeDomainHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onMessage(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketClient'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onOpen(org.java_websocket.handshake.ServerHandshake)'=>'a(org.java_websocket.handshake.ServerHandshake)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketClient'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onClose(int, java.lang.String, boolean)'=>'b(int, java.lang.String, boolean)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onError(java.lang.Exception)'=>'a(java.lang.Exception)' in class 'me.MiniDigger.CraftCore.Socket.CoreSocketClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAuthCache(org.apache.http.client.AuthCache)'=>'a(org.apache.http.client.AuthCache)' in class 'org.apache.http.client.protocol.HttpClientContext'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserToken()'=>'l()' in class 'org.apache.http.client.protocol.HttpClientContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCookieSpec()'=>'d()' in class 'org.apache.http.client.protocol.HttpClientContext'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'adapt(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.HttpClientContext'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAuthCache()'=>'i()' in class 'org.apache.http.client.protocol.HttpClientContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getHttpRoute()'=>'a()' in class 'org.apache.http.client.protocol.HttpClientContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.client.methods.RequestBuilder$InternalEntityEclosingRequest'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isStreaming()'=>'g()' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isChunked()'=>'b()' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isConsumed()'=>'c()' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.impl.execchain.RequestEntityProxy'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.BasicDomainHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.BasicDomainHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.cookie.SetCookie, java.lang.String)'=>'a(org.apache.http.cookie.SetCookie, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicDomainHandler'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getDigest()'=>'a()' in class 'org.apache.http.impl.auth.HttpEntityDigester'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPorts()'=>'f()' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPorts(int[])'=>'a(int[])' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isExpired(java.util.Date)'=>'a(java.util.Date)' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setDiscard(boolean)'=>'d(boolean)' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setCommentURL(java.lang.String)'=>'f(java.lang.String)' in class 'org.apache.http.impl.cookie.BasicClientCookie2'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.io.SessionInputBuffer, org.apache.http.config.MessageConstraints)'=>'a(org.apache.http.io.SessionInputBuffer, org.apache.http.config.MessageConstraints)' in class 'org.apache.http.impl.conn.DefaultHttpResponseParserFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'bind(java.net.Socket)'=>'a(java.net.Socket)' in class 'org.apache.http.impl.DefaultBHttpClientConnection'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'flush()'=>'b()' in class 'org.apache.http.impl.DefaultBHttpClientConnection'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getExceptions()'=>'b()' in class 'org.apache.http.conn.util.PublicSuffixList'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRules()'=>'a()' in class 'org.apache.http.conn.util.PublicSuffixList'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(long, java.util.concurrent.TimeUnit)'=>'a(long, java.util.concurrent.TimeUnit)' in class 'org.apache.http.conn.ConnectionRequest'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.RequestClientConnControl'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isComplete()'=>'d()' in class 'org.apache.http.auth.AuthScheme'. Given that the prefix 'is' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSchemeName()'=>'a()' in class 'org.apache.http.auth.AuthScheme'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRealm()'=>'b()' in class 'org.apache.http.auth.AuthScheme'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'nextHeader()'=>'a()' in class 'org.apache.http.HeaderIterator'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayer()'=>'c()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRealName()'=>'d()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSuffix()'=>'h()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'b()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUUID()'=>'e()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'save()'=>'a()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPrefix()'=>'g()' in class 'me.MiniDigger.CraftCore.User.CoreUser'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNextPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'endPhase()'=>'b()' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'startPhase()'=>'a()' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFeatures()'=>'g()' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getGame()'=>'f()' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addFeature(me.MiniDigger.Core.Feature.Feature)'=>'a(me.MiniDigger.Core.Feature.Feature)' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getFeature(me.MiniDigger.Core.Feature.FeatureType)'=>'a(me.MiniDigger.Core.Feature.FeatureType)' in class 'me.MiniDigger.CraftCore.Phase.CorePhase'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedHealthFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedHealthFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedHealthFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayer()'=>'c()' in class 'me.MiniDigger.Core.User.User'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRealName()'=>'d()' in class 'me.MiniDigger.Core.User.User'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSuffix()'=>'h()' in class 'me.MiniDigger.Core.User.User'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUUID()'=>'e()' in class 'me.MiniDigger.Core.User.User'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'init()'=>'a()' in class 'me.MiniDigger.Core.User.User'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPrefix()'=>'g()' in class 'me.MiniDigger.Core.User.User'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addLine(me.MiniDigger.Core.Scoreboard.ScoreboardLine)'=>'a(me.MiniDigger.Core.Scoreboard.ScoreboardLine)' in class 'me.MiniDigger.Core.Scoreboard.Scoreboard'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$7'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'register()'=>'b()' in class 'me.MiniDigger.Core.Licence.LicenseHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayer()'=>'d()' in class 'me.MiniDigger.Core.Command.CommandArgs'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'e()' in class 'me.MiniDigger.Core.Command.CommandArgs'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLabel()'=>'b()' in class 'me.MiniDigger.Core.Command.CommandArgs'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getArgs()'=>'c()' in class 'me.MiniDigger.Core.Command.CommandArgs'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSender()'=>'a()' in class 'me.MiniDigger.Core.Command.CommandArgs'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load(me.MiniDigger.Core.AddOn.AddOnBean)'=>'a(me.MiniDigger.Core.AddOn.AddOnBean)' in class 'me.MiniDigger.Core.AddOn.AddOn'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'enable()'=>'b()' in class 'me.MiniDigger.Core.AddOn.AddOn'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'disable()'=>'c()' in class 'me.MiniDigger.Core.AddOn.AddOn'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'me.MiniDigger.Core.AddOn.AddOn'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBean()'=>'d()' in class 'me.MiniDigger.Core.AddOn.AddOn'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getExpiryDate()'=>'c()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getDomain()'=>'d()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isSecure()'=>'g()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'is' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setDomain(java.lang.String)'=>'d(java.lang.String)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'h()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPorts()'=>'f()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isExpired(java.util.Date)'=>'a(java.util.Date)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setSecure(boolean)'=>'c(boolean)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPath()'=>'e()' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPath(java.lang.String)'=>'e(java.lang.String)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setComment(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAttribute(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setExpiryDate(java.util.Date)'=>'a(java.util.Date)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setVersion(int)'=>'b(int)' in class 'org.apache.http.impl.cookie.BasicClientCookie'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'upgrade(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.conn.DefaultHttpClientConnectionOperator'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'connect(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, java.net.InetSocketAddress, int, org.apache.http.config.SocketConfig, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.conn.ManagedHttpClientConnection, org.apache.http.HttpHost, java.net.InetSocketAddress, int, org.apache.http.config.SocketConfig, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.conn.DefaultHttpClientConnectionOperator'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRemotePort()'=>'b()' in class 'org.apache.http.impl.BHttpConnectionBase'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isStale()'=>'b()' in class 'org.apache.http.impl.BHttpConnectionBase'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isOpen()'=>'a()' in class 'org.apache.http.impl.BHttpConnectionBase'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'c()' in class 'org.apache.http.impl.BHttpConnectionBase'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.RequestAuthCache'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAuthScheme()'=>'a()' in class 'org.apache.http.auth.AuthOption'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'sendPacket(me.MiniDigger.Core.Packet.Packet, me.MiniDigger.Core.Socket.Session)'=>'a(me.MiniDigger.Core.Packet.Packet, me.MiniDigger.Core.Socket.Session)' in class 'me.MiniDigger.CraftCore.Packet.CorePacketHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPacket(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.CorePacketHandler'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'sendPacket(me.MiniDigger.Core.Packet.Packet)'=>'a(me.MiniDigger.Core.Packet.Packet)' in class 'me.MiniDigger.CraftCore.Packet.CorePacketHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedFoodFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedFoodFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.FixedFoodFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'load()'=>'b()' in class 'me.MiniDigger.Core.SQL.Saveable'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'save()'=>'a()' in class 'me.MiniDigger.Core.SQL.Saveable'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$6'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'give(org.bukkit.entity.Player, me.MiniDigger.Core.Kit.Kit)'=>'a(org.bukkit.entity.Player, me.MiniDigger.Core.Kit.Kit)' in class 'me.MiniDigger.Core.Kit.KitHandler'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getKit(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.Kit.KitHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'noConsol()'=>'j()' in class 'me.MiniDigger.Core.Command.Command'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'noPerm()'=>'c()' in class 'me.MiniDigger.Core.Command.Command'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'usage()'=>'f()' in class 'me.MiniDigger.Core.Command.Command'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'consol()'=>'g()' in class 'me.MiniDigger.Core.Command.Command'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'fewArgs()'=>'k()' in class 'me.MiniDigger.Core.Command.Command'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'aliases()'=>'d()' in class 'me.MiniDigger.Core.Command.Command'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'permission()'=>'b()' in class 'me.MiniDigger.Core.Command.Command'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'sync()'=>'m()' in class 'me.MiniDigger.Core.Command.Command'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'name()'=>'a()' in class 'me.MiniDigger.Core.Command.Command'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'manyArgs()'=>'l()' in class 'me.MiniDigger.Core.Command.Command'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'min()'=>'h()' in class 'me.MiniDigger.Core.Command.Command'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'max()'=>'i()' in class 'me.MiniDigger.Core.Command.Command'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965Spec'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'match(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'b(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965Spec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2965Spec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'org.apache.http.impl.cookie.RFC2965Spec'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'flush()'=>'b()' in class 'org.apache.http.impl.conn.CPoolProxy'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAttribute(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getSocket()'=>'a()' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'detach(org.apache.http.HttpClientConnection)'=>'c(org.apache.http.HttpClientConnection)' in class 'org.apache.http.impl.conn.CPoolProxy'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getRemotePort()'=>'b()' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'newProxy(org.apache.http.impl.conn.CPoolEntry)'=>'a(org.apache.http.impl.conn.CPoolEntry)' in class 'org.apache.http.impl.conn.CPoolProxy'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'bind(java.net.Socket)'=>'a(java.net.Socket)' in class 'org.apache.http.impl.conn.CPoolProxy'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isStale()'=>'b()' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isOpen()'=>'a()' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'is' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'shutdown()'=>'c()' in class 'org.apache.http.impl.conn.CPoolProxy'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getPoolEntry(org.apache.http.HttpClientConnection)'=>'b(org.apache.http.HttpClientConnection)' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSSLSession()'=>'b()' in class 'org.apache.http.impl.conn.CPoolProxy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getLMv2Hash()'=>'h()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getLMHash()'=>'d()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTimestamp()'=>'j()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNTLMv2Hash()'=>'i()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNTLMv2Blob()'=>'k()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getLMResponse()'=>'e()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getNTLMHash()'=>'f()' in class 'org.apache.http.impl.auth.NTLMEngineImpl$CipherGen'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.impl.execchain.ResponseEntityProxy'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.impl.execchain.ResponseEntityProxy'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'enchance(org.apache.http.HttpResponse, org.apache.http.impl.execchain.ConnectionHolder)'=>'a(org.apache.http.HttpResponse, org.apache.http.impl.execchain.ConnectionHolder)' in class 'org.apache.http.impl.execchain.ResponseEntityProxy'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.impl.execchain.ResponseEntityProxy'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.lang.String[], java.lang.String[])'=>'a(java.lang.String, java.lang.String[], java.lang.String[])' in class 'org.apache.http.conn.ssl.X509HostnameVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'remove(int)'=>'b(int)' in class 'org.apache.http.impl.client.RedirectLocations'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(int)'=>'a(int)' in class 'org.apache.http.impl.client.RedirectLocations'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'contains(java.net.URI)'=>'a(java.net.URI)' in class 'org.apache.http.impl.client.RedirectLocations'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'add(java.net.URI)'=>'b(java.net.URI)' in class 'org.apache.http.impl.client.RedirectLocations'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.RequestAddCookies'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setContent(byte[])'=>'a(byte[])' in class 'org.java_websocket.handshake.HandshakedataImpl1'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'put(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.java_websocket.handshake.HandshakedataImpl1'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFieldValue(java.lang.String)'=>'a(java.lang.String)' in class 'org.java_websocket.handshake.HandshakedataImpl1'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'b()' in class 'org.java_websocket.handshake.HandshakedataImpl1'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onOpen(org.java_websocket.handshake.ServerHandshake)'=>'a(org.java_websocket.handshake.ServerHandshake)' in class 'org.java_websocket.client.WebSocketClient'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onMessage(java.nio.ByteBuffer)'=>'a(java.nio.ByteBuffer)' in class 'org.java_websocket.client.WebSocketClient'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onClosing(int, java.lang.String, boolean)'=>'a(int, java.lang.String, boolean)' in class 'org.java_websocket.client.WebSocketClient'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'connect()'=>'a()' in class 'org.java_websocket.client.WebSocketClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close()'=>'b()' in class 'org.java_websocket.client.WebSocketClient'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'onMessage(java.lang.String)'=>'d(java.lang.String)' in class 'org.java_websocket.client.WebSocketClient'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onClose(int, java.lang.String, boolean)'=>'b(int, java.lang.String, boolean)' in class 'org.java_websocket.client.WebSocketClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(java.lang.String)'=>'a(java.lang.String)' in class 'org.java_websocket.client.WebSocketClient'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'onError(java.lang.Exception)'=>'a(java.lang.Exception)' in class 'org.java_websocket.client.WebSocketClient'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getParameters()'=>'c()' in class 'org.apache.http.HeaderElement'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.HeaderElement'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.HeaderElement'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.protocol.HttpCoreContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAttribute(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.protocol.HttpCoreContext'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getRequest()'=>'b()' in class 'org.apache.http.protocol.HttpCoreContext'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'adapt(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.protocol.HttpCoreContext'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getTargetHost()'=>'d()' in class 'org.apache.http.protocol.HttpCoreContext'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String, java.lang.Class)'=>'a(java.lang.String, java.lang.Class)' in class 'org.apache.http.protocol.HttpCoreContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getConnection()'=>'a()' in class 'org.apache.http.protocol.HttpCoreContext'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'zipFolder(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'me.MiniDigger.CraftCore.Util.CoreZipUtil'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.client.methods.HttpPost'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.RedirectExec'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.ServerPacket'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Packet.Packets.ServerPacket'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle(org.java_websocket.WebSocket)'=>'a(org.java_websocket.WebSocket)' in class 'me.MiniDigger.CraftCore.Packet.Packets.ServerPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle()'=>'a()' in class 'me.MiniDigger.CraftCore.Packet.Packets.ServerPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addGame(me.MiniDigger.Core.Game.Game)'=>'b(me.MiniDigger.Core.Game.Game)' in class 'me.MiniDigger.CraftCore.Game.CoreGameHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getMainGame()'=>'a()' in class 'me.MiniDigger.CraftCore.Game.CoreGameHandler'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'removeGame(me.MiniDigger.Core.Game.Game)'=>'a(me.MiniDigger.Core.Game.Game)' in class 'me.MiniDigger.CraftCore.Game.CoreGameHandler'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.DropFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.DropFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.DropFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isNewer(me.MiniDigger.Core.Update.UpdateHandler$PluginVersion, me.MiniDigger.Core.Update.UpdateType)'=>'a(me.MiniDigger.Core.Update.UpdateHandler$PluginVersion, me.MiniDigger.Core.Update.UpdateType)' in class 'me.MiniDigger.Core.Update.UpdateHandler$PluginVersion'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBuild()'=>'d()' in class 'me.MiniDigger.Core.Update.UpdateHandler$PluginVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMinor()'=>'b()' in class 'me.MiniDigger.Core.Update.UpdateHandler$PluginVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMajor()'=>'a()' in class 'me.MiniDigger.Core.Update.UpdateHandler$PluginVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCommit()'=>'c()' in class 'me.MiniDigger.Core.Update.UpdateHandler$PluginVersion'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'loadAll()'=>'a()' in class 'me.MiniDigger.Core.SQL.SaveHandler'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$5'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'c()' in class 'me.MiniDigger.Core.Kit.Kit'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getArmor()'=>'a()' in class 'me.MiniDigger.Core.Kit.Kit'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'b()' in class 'me.MiniDigger.Core.Kit.Kit'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'validate(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.cookie.Cookie, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2109Spec'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.RFC2109Spec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'org.apache.http.impl.cookie.RFC2109Spec'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.entity.BufferedHttpEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.entity.BufferedHttpEntity'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isStreaming()'=>'g()' in class 'org.apache.http.entity.BufferedHttpEntity'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isChunked()'=>'b()' in class 'org.apache.http.entity.BufferedHttpEntity'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.entity.BufferedHttpEntity'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.config.SocketConfig$Builder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'process(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)' in class 'org.apache.http.client.protocol.RequestAcceptEncoding'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getFieldValue(java.lang.String)'=>'a(java.lang.String)' in class 'org.java_websocket.handshake.Handshakedata'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'b()' in class 'org.java_websocket.handshake.Handshakedata'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getElements()'=>'c()' in class 'org.apache.http.Header'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'a()' in class 'org.apache.http.Header'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue()'=>'b()' in class 'org.apache.http.Header'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'formatTime(int)'=>'a(int)' in class 'me.MiniDigger.CraftCore.Util.CoreTimeUtil'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAttribute(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.protocol.HttpContext'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setAttribute(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.protocol.HttpContext'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isNewer(me.MiniDigger.Core.Update.UpdateHandler$PluginVersion, me.MiniDigger.Core.Update.UpdateType)'=>'a(me.MiniDigger.Core.Update.UpdateHandler$PluginVersion, me.MiniDigger.Core.Update.UpdateType)' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Given that the prefix 'is' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBuild()'=>'d()' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMinor()'=>'b()' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMajor()'=>'a()' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getCommit()'=>'c()' in class 'me.MiniDigger.CraftCore.Update.CorePluginVersion'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntity()'=>'b()' in class 'org.apache.http.client.methods.HttpEntityEnclosingRequestBase'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setEntity(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.client.methods.HttpEntityEnclosingRequestBase'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.ProtocolExec'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.LogRecordPacket'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Packet.Packets.LogRecordPacket'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle(org.java_websocket.WebSocket)'=>'a(org.java_websocket.WebSocket)' in class 'me.MiniDigger.CraftCore.Packet.Packets.LogRecordPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle()'=>'a()' in class 'me.MiniDigger.CraftCore.Packet.Packets.LogRecordPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPhase(me.MiniDigger.Core.Phase.Phase)'=>'a(me.MiniDigger.Core.Phase.Phase)' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'set' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPrefix()'=>'c()' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getGameData(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setGameData(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'set' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'allowJoin()'=>'f()' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'e()' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getIdentifier()'=>'a()' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPlayers()'=>'b()' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end(me.MiniDigger.Core.User.User[])'=>'a(me.MiniDigger.Core.User.User[])' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPhase()'=>'d()' in class 'me.MiniDigger.CraftCore.Game.CoreGame'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.DoubleJumpFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.DoubleJumpFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.DoubleJumpFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'kill()'=>'b()' in class 'me.MiniDigger.Core.SQL.SQLQuery'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatement()'=>'a()' in class 'me.MiniDigger.Core.SQL.SQLQuery'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$4'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getCompleter()'=>'a()' in class 'me.MiniDigger.Core.Command.BukkitCommand'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setCompleter(me.MiniDigger.Core.Command.BukkitCompleter)'=>'a(me.MiniDigger.Core.Command.BukkitCompleter)' in class 'me.MiniDigger.Core.Command.BukkitCommand'. Given that the prefix 'set' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.NetscapeDraftSpec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'org.apache.http.impl.cookie.NetscapeDraftSpec'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getUserToken(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.client.NoopUserTokenHandler'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.client.entity.DecompressingEntity'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.client.entity.DecompressingEntity'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isTcpNoDelay()'=>'e()' in class 'org.apache.http.config.SocketConfig'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSoTimeout()'=>'a()' in class 'org.apache.http.config.SocketConfig'. Given that the prefix 'get' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getSoLinger()'=>'c()' in class 'org.apache.http.config.SocketConfig'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'findClass(java.lang.String, boolean)'=>'a(java.lang.String, boolean)' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnClassLoader'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getClasses()'=>'a()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnClassLoader'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getAddOn()'=>'a()' in class 'me.MiniDigger.CraftCore.AddOn.CoreAddOnClassLoader'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setContent(byte[])'=>'a(byte[])' in class 'org.java_websocket.handshake.HandshakeBuilder'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'put(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.java_websocket.handshake.HandshakeBuilder'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close(int)'=>'b(int)' in class 'org.java_websocket.WebSocket'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'sendFrame(org.java_websocket.framing.Framedata)'=>'a(org.java_websocket.framing.Framedata)' in class 'org.java_websocket.WebSocket'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'send(java.lang.String)'=>'a(java.lang.String)' in class 'org.java_websocket.WebSocket'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'close(int, java.lang.String)'=>'a(int, java.lang.String)' in class 'org.java_websocket.WebSocket'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getBuffer()'=>'a()' in class 'org.apache.http.FormattedHeader'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getValuePos()'=>'b()' in class 'org.apache.http.FormattedHeader'. Given that the prefix 'get' is common, only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isWhitespace(char)'=>'a(char)' in class 'org.apache.http.protocol.HTTP'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'toString(java.lang.String[])'=>'a(java.lang.String[])' in class 'me.MiniDigger.CraftCore.Util.CoreStringUtil'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'contains(java.lang.Object[], java.lang.Object)'=>'a(java.lang.Object[], java.lang.Object)' in class 'me.MiniDigger.CraftCore.Util.CoreStringUtil'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getURI()'=>'a()' in class 'org.apache.http.client.methods.HttpRequestBase'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getMethod()'=>'a()' in class 'org.apache.http.client.methods.HttpRequestBase'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getConfig()'=>'a()' in class 'org.apache.http.client.methods.HttpRequestBase'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setURI(java.net.URI)'=>'a(java.net.URI)' in class 'org.apache.http.client.methods.HttpRequestBase'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setConfig(org.apache.http.client.config.RequestConfig)'=>'a(org.apache.http.client.config.RequestConfig)' in class 'org.apache.http.client.methods.HttpRequestBase'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'get(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.REST.CoreRESTHandler'. Given that the prefix 'get' is common, only 0 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'showFile(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'me.MiniDigger.CraftCore.REST.CoreRESTHandler'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'execute(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)'=>'a(org.apache.http.conn.routing.HttpRoute, org.apache.http.client.methods.HttpRequestWrapper, org.apache.http.client.protocol.HttpClientContext, org.apache.http.client.methods.HttpExecutionAware)' in class 'org.apache.http.impl.execchain.MainClientExec'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'setClientName(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Given that the prefix 'set' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setPass(java.lang.String)'=>'e(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Given that the prefix 'set' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle(org.java_websocket.WebSocket)'=>'a(org.java_websocket.WebSocket)' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getClientName()'=>'a()' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPass()'=>'c()' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle()'=>'a()' in class 'me.MiniDigger.CraftCore.Packet.Packets.IdentificationPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.ClearInvFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.ClearInvFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.ClearInvFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'loadWorld(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.Core.World.WorldHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'copyWorld(java.lang.String)'=>'d(java.lang.String)' in class 'me.MiniDigger.Core.World.WorldHandler'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUrl()'=>'c()' in class 'me.MiniDigger.Core.SQL.SQLHandler'. Given that the prefix 'get' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getUser()'=>'a()' in class 'me.MiniDigger.Core.SQL.SQLHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getPass()'=>'b()' in class 'me.MiniDigger.Core.SQL.SQLHandler'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getValue(org.bukkit.entity.Player, org.bukkit.Location)'=>'a(org.bukkit.entity.Player, org.bukkit.Location)' in class 'me.MiniDigger.CraftCore.Protocol.CoreSignChangers$3'. Given that the prefix 'get' is common, only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'parse(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)'=>'a(org.apache.http.Header, org.apache.http.cookie.CookieOrigin)' in class 'org.apache.http.impl.cookie.IgnoreSpec'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getVersion()'=>'a()' in class 'org.apache.http.impl.cookie.IgnoreSpec'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create(org.apache.http.protocol.HttpContext)'=>'a(org.apache.http.protocol.HttpContext)' in class 'org.apache.http.impl.auth.KerberosSchemeFactory'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'writeTo(java.io.OutputStream)'=>'a(java.io.OutputStream)' in class 'org.apache.http.entity.HttpEntityWrapper'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getContent()'=>'f()' in class 'org.apache.http.entity.HttpEntityWrapper'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isStreaming()'=>'g()' in class 'org.apache.http.entity.HttpEntityWrapper'. Given that the prefix 'is' is common, only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isChunked()'=>'b()' in class 'org.apache.http.entity.HttpEntityWrapper'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'isRepeatable()'=>'a()' in class 'org.apache.http.entity.HttpEntityWrapper'. Given that the prefix 'is' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'verify(java.lang.String, java.security.cert.X509Certificate)'=>'a(java.lang.String, java.security.cert.X509Certificate)' in class 'org.apache.http.conn.ssl.DefaultHostnameVerifier'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'create()'=>'a()' in class 'org.apache.http.config.RegistryBuilder'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'register(java.lang.String, java.lang.Object)'=>'a(java.lang.String, java.lang.Object)' in class 'org.apache.http.config.RegistryBuilder'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'b()' in class 'org.apache.http.config.RegistryBuilder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.client.methods.RequestBuilder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setUri(java.net.URI)'=>'a(java.net.URI)' in class 'org.apache.http.client.methods.RequestBuilder'. Given that the prefix 'set' is common, only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'copy(org.apache.http.HttpRequest)'=>'a(org.apache.http.HttpRequest)' in class 'org.apache.http.client.methods.RequestBuilder'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'value()'=>'a()' in class 'org.apache.http.annotation.GuardedBy'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'batch(org.java_websocket.WebSocketImpl, java.nio.channels.ByteChannel)'=>'a(org.java_websocket.WebSocketImpl, java.nio.channels.ByteChannel)' in class 'org.java_websocket.SocketChannelIOHelper'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'read(java.nio.ByteBuffer, org.java_websocket.WebSocketImpl, java.nio.channels.ByteChannel)'=>'a(java.nio.ByteBuffer, org.java_websocket.WebSocketImpl, java.nio.channels.ByteChannel)' in class 'org.java_websocket.SocketChannelIOHelper'. Only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'readMore(java.nio.ByteBuffer, org.java_websocket.WebSocketImpl, org.java_websocket.WrappedByteChannel)'=>'a(java.nio.ByteBuffer, org.java_websocket.WebSocketImpl, org.java_websocket.WrappedByteChannel)' in class 'org.java_websocket.SocketChannelIOHelper'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'build()'=>'a()' in class 'org.apache.http.protocol.ChainBuilder'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addAllLast(java.lang.Object[])'=>'a(java.lang.Object[])' in class 'org.apache.http.protocol.ChainBuilder'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'addLast(java.lang.Object)'=>'c(java.lang.Object)' in class 'org.apache.http.protocol.ChainBuilder'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addFirst(java.lang.Object)'=>'b(java.lang.Object)' in class 'org.apache.http.protocol.ChainBuilder'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'iterator()'=>'c()' in class 'org.apache.http.message.HeaderGroup'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'clear()'=>'a()' in class 'org.apache.http.message.HeaderGroup'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHeaders(java.lang.String)'=>'a(java.lang.String)' in class 'org.apache.http.message.HeaderGroup'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeaders(org.apache.http.Header[])'=>'a(org.apache.http.Header[])' in class 'org.apache.http.message.HeaderGroup'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'iterator(java.lang.String)'=>'d(java.lang.String)' in class 'org.apache.http.message.HeaderGroup'. Only 8 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(org.apache.http.Header)'=>'a(org.apache.http.Header)' in class 'org.apache.http.message.HeaderGroup'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAllHeaders()'=>'b()' in class 'org.apache.http.message.HeaderGroup'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'isAborted()'=>'b()' in class 'org.apache.http.client.methods.AbstractExecutionAwareRequest'. Given that the prefix 'is' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'compare(java.util.Map$Entry, java.util.Map$Entry)'=>'a(java.util.Map$Entry, java.util.Map$Entry)' in class 'me.MiniDigger.CraftCore.REST.CoreDashingHandler$3'. Only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getParams()'=>'d()' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setEntity(org.apache.http.HttpEntity)'=>'a(org.apache.http.HttpEntity)' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(java.lang.String, java.lang.String)'=>'a(java.lang.String, java.lang.String)' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getAllHeaders()'=>'b()' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'addHeader(org.apache.http.Header)'=>'a(org.apache.http.Header)' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Only 9 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeaders(org.apache.http.Header[])'=>'a(org.apache.http.Header[])' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'set' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getEntity()'=>'b()' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'get' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'getStatusLine()'=>'a()' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'get' is common, only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'setHeader(java.lang.String, java.lang.String)'=>'b(java.lang.String, java.lang.String)' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'set' is common, only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getHeaders(java.lang.String)'=>'b(java.lang.String)' in class 'org.apache.http.impl.execchain.HttpResponseProxy'. Given that the prefix 'get' is common, only 7 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Method mapping 'fromString(java.lang.String)'=>'a(java.lang.String)' in class 'me.MiniDigger.CraftCore.Packet.Packets.CommandPacket'. Only 10 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getName()'=>'b()' in class 'me.MiniDigger.CraftCore.Packet.Packets.CommandPacket'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle(org.java_websocket.WebSocket)'=>'a(org.java_websocket.WebSocket)' in class 'me.MiniDigger.CraftCore.Packet.Packets.CommandPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'handle()'=>'a()' in class 'me.MiniDigger.CraftCore.Packet.Packets.CommandPacket'. Only 6 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'end()'=>'e()' in class 'me.MiniDigger.CraftCore.Feature.Features.BuildFeature'. Only 3 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'getType()'=>'a()' in class 'me.MiniDigger.CraftCore.Feature.Features.BuildFeature'. Given that the prefix 'get' is common, only 4 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Method mapping 'start()'=>'d()' in class 'me.MiniDigger.CraftCore.Feature.Features.BuildFeature'. Only 5 characters have to be guessed in method name. If method is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
[2014.12.14 12:17:41] Saving 897 classes in "F:\DATA\Dev\bukkit_ws\C_Core\C_Build\target\obfuscated"
WARNING: File 'F:\DATA\Dev\bukkit_ws\C_Core\C_Build\target\obfuscated\Core.jar' already exists in 'F:\DATA\Dev\bukkit_ws\C_Core\C_Build\target\obfuscated'. Renaming to 'F:\DATA\Dev\bukkit_ws\C_Core\C_Build\target\obfuscated\Core.jar.BACKUP'.
[2014.12.14 12:17:41] Terminating normally.
